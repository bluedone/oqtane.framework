@inject IInstallationService InstallationService
@inject IJSRuntime JSRuntime
@inject SiteState SiteState

@if (_initialized)
{
    @if (!_installation.Success)
    {
        <Installer />
    }
    else
    {
        @if (string.IsNullOrEmpty(_installation.Message))
        {
            <div style="@_display">
                <CascadingAuthenticationState>
                    <CascadingValue Value="@PageState">
                        <SiteRouter Runtime="@Runtime" RenderMode="@RenderMode" OnStateChange="@ChangeState" />
                    </CascadingValue>
                </CascadingAuthenticationState>
            </div>
        }
        else
        {
            <div class="app-alert">
                @_installation.Message
            </div>
        }
    }
}

@code {
    [Parameter]
    public string AntiForgeryToken { get; set; }

    [Parameter]
    public string Runtime { get; set; }

    [Parameter]
    public string RenderMode { get; set; }

    private bool _initialized = false;
    private string _display = "display: none;";
    private Installation _installation = new Installation { Success = false, Message = "" };

    private PageState PageState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        SiteState.AntiForgeryToken = AntiForgeryToken;
        InstallationService.SetAntiForgeryTokenHeader(AntiForgeryToken);

        _installation = await InstallationService.IsInstalled();
        if (_installation.Alias != null)
        {
            SiteState.Alias = _installation.Alias;
        }
        else
        {
            _installation.Message = "Site Not Configured Correctly - No Matching Alias Exists For Host Name";
        }
        _initialized = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _display = "";
            StateHasChanged();
        }
    }

    private void ChangeState(PageState pageState)
    {
        PageState = pageState;
        StateHasChanged();
    }
}
