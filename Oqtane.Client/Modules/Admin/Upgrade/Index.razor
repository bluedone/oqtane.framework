@namespace Oqtane.Modules.Admin.Upgrade
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IFileService FileService
@inject IPackageService PackageService
@inject IInstallationService InstallationService

@if (_package != null)
{
<TabStrip>
    <TabPanel Name="Download">
        @if (_upgradeavailable)
        {
            <ModuleMessage Type="MessageType.Info" Message="Download a new version of the framework. Once you are ready click Install to complete the installation."></ModuleMessage>
            @("Framework") @_package.Version <button type="button" class="btn btn-success" @onclick=@(async () => await Download(Constants.PackageId, Constants.Version))>Download</button>
        }
        else
        {
            <ModuleMessage Type="MessageType.Info" Message="Framework Is Already Up To Date"></ModuleMessage>
        }
    </TabPanel>
    @if (_upgradeavailable)
    {
    <TabPanel Name="Upload">
        <table class="table table-borderless">
            <tr>
                <td>
                    <Label HelpText="Upload a new framework package. Once it is uploaded click Install to complete the installation.">Framework: </Label>
                </td>
                <td>
                    <FileManager Filter="nupkg" ShowFiles="false" Folder="Framework" />
                </td>
            </tr>
        </table>
    </TabPanel>
    }
</TabStrip>
}

@code {
    private Package _package;
    private bool _upgradeavailable = false;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Host;

    protected override async Task OnInitializedAsync()
    {
        List<Package> packages = await PackageService.GetPackagesAsync("framework");
        _package = packages.FirstOrDefault();
        if (_package != null)
        {
            _upgradeavailable = (Version.Parse(_package.Version).CompareTo(Version.Parse(Constants.Version)) > 0);
        }
        else
        {
            _package = new Package { Name = Constants.PackageId, Version = Constants.Version };
        }
    }

    private async Task Upgrade()
    {
        await InstallationService.Upgrade();
        NavigationManager.NavigateTo(NavigateUrl());
    }

    private async Task Download(string packageid, string version)
    {
        await PackageService.DownloadPackageAsync(packageid, version, "Framework");
        await InstallationService.Upgrade();
        NavigationManager.NavigateTo(NavigateUrl());
    }
}
