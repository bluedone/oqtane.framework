@namespace Oqtane.Modules.Admin.ModuleDefinitions
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IFileService FileService
@inject IModuleDefinitionService ModuleDefinitionService
@inject IPackageService PackageService

<table class="table table-borderless">
    <tr>
        <td>
            <label for="Name" class="control-label">Module: </label>
        </td>
        <td>
            <FileUpload Filter=".nupkg" @ref="fileupload"></FileUpload>
        </td>
    </tr>
</table>
<button type="button" class="btn btn-primary" @onclick="UploadFile">Upload Module</button>

@if (packages != null)
{
    <hr />
    <div class="mx-auto text-center"><h2>Available Modules</h2></div>

    <Pager Items="@packages">
        <Header>
            <th>Name</th>
            <th>Version</th>
            <th></th>
        </Header>
        <Row>
            <td>@context.Name</td>
            <td>@context.Version</td>
            <td>
                <button type="button" class="btn btn-primary" @onclick=@(async () => await DownloadModule(context.PackageId, context.Version))>Download Module</button>
            </td>
        </Row>
    </Pager>
}

@if (uploaded)
{
    <button type="button" class="btn btn-success" @onclick="InstallModules">Install</button>
}
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>


@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Host; } }

    bool uploaded = false;
    List<Package> packages;
    FileUpload fileupload;

    protected override async Task OnInitializedAsync()
    {
        List<ModuleDefinition> moduledefinitions = await ModuleDefinitionService.GetModuleDefinitionsAsync(PageState.Site.SiteId);
        packages = await PackageService.GetPackagesAsync("module");
        foreach(Package package in packages.ToArray())
        {
            if (moduledefinitions.Exists(item => Utilities.GetTypeName(item.ModuleDefinitionName) == package.PackageId))
            {
                packages.Remove(package);
            }
        }
    }

    private async Task UploadFile()
    {
        string[] files = await fileupload.GetFiles();
        if (files.Length > 0)
        {
            if (files[0].Contains(".Module."))
            {
                try
                {
                    if (await FileService.UploadFilesAsync("Modules", files, ""))
                    {
                        AddModuleMessage("Module Uploaded Successfully. Click Install To Complete Installation.", MessageType.Success);
                        uploaded = true;
                        StateHasChanged();
                    }
                    else
                    {
                        AddModuleMessage("Module Upload Failed.", MessageType.Error);
                    }
                }
                catch (Exception ex)
                {
                    AddModuleMessage("Module Upload Failed. " + ex.Message, MessageType.Error);
                }
            }
            else
            {
                AddModuleMessage("Invalid Module Package", MessageType.Error);
            }
        }
        else
        {
            AddModuleMessage("You Must Select A Module To Upload", MessageType.Warning);
        }
    }

    private async Task InstallModules()
    {
        await ModuleDefinitionService.InstallModuleDefinitionsAsync();
        NavigationManager.NavigateTo(NavigateUrl(Reload.Application));
    }

    private async Task DownloadModule(string moduledefinitionname, string version)
    {
        await PackageService.DownloadPackageAsync(moduledefinitionname, version, "Modules");
        AddModuleMessage("Module Downloaded Successfully. Click Install To Complete Installation.", MessageType.Success);
        uploaded = true;
        StateHasChanged();
    }
}
