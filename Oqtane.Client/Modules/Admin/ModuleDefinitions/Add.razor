@namespace Oqtane.Modules.Admin.ModuleDefinitions
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IFileService FileService
@inject IModuleDefinitionService ModuleDefinitionService
@inject IPackageService PackageService

<table class="table table-borderless">
    <tr>
        <td>
            <label for="Name" class="control-label">Module: </label>
        </td>
        <td>
            <FileManager Filter="nupkg" ShowFiles="false" Folder="Modules" />
        </td>
    </tr>
</table>

@if (packages != null)
{
    <hr class="app-rule" />
    <div class="mx-auto text-center"><h2>Available Modules</h2></div>

    <Pager Items="@packages">
        <Header>
            <th>Name</th>
            <th>Version</th>
            <th></th>
        </Header>
        <Row>
            <td>@context.Name</td>
            <td>@context.Version</td>
            <td>
                <button type="button" class="btn btn-primary" @onclick=@(async () => await DownloadModule(context.PackageId, context.Version))>Download Module</button>
            </td>
        </Row>
    </Pager>
}

<button type="button" class="btn btn-success" @onclick="InstallModules">Install</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>


@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Host; } }

    List<Package> packages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            List<ModuleDefinition> moduledefinitions = await ModuleDefinitionService.GetModuleDefinitionsAsync(PageState.Site.SiteId);
            packages = await PackageService.GetPackagesAsync("module");
            foreach(Package package in packages.ToArray())
            {
                if (moduledefinitions.Exists(item => Utilities.GetTypeName(item.ModuleDefinitionName) == package.PackageId))
                {
                    packages.Remove(package);
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Packages {Error}", ex.Message);
            AddModuleMessage("Error Loading Packages", MessageType.Error);
        }
    }

    private async Task InstallModules()
    {
        try
        {
            await ModuleDefinitionService.InstallModuleDefinitionsAsync();
            NavigationManager.NavigateTo(NavigateUrl(Reload.Application));
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Installating Module");
        }
    }

    private async Task DownloadModule(string moduledefinitionname, string version)
    {
        try
        {
            await PackageService.DownloadPackageAsync(moduledefinitionname, version, "Modules");
            await logger.LogInformation("Module {ModuleDefinitionName} {Version} Downloaded Successfully", moduledefinitionname, version);
            AddModuleMessage("Module Downloaded Successfully. Click Install To Complete Installation.", MessageType.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Downloading Module {ModuleDefinitionName} {Version}", moduledefinitionname, version);
            AddModuleMessage("Error Downloading Module", MessageType.Error);
        }
    }
}
