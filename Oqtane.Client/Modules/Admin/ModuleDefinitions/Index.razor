@namespace Oqtane.Modules.Admin.ModuleDefinitions
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IModuleDefinitionService ModuleDefinitionService
@inject IPackageService PackageService

@if (moduledefinitions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Text="Install Module" />

    <Pager Items="@moduledefinitions">
        <Header>
            <th>&nbsp;</th>
            <th>&nbsp;</th>
            <th>Name</th>
            <th>Version</th>
            <th>&nbsp;</th>
        </Header>
        <Row>
            <td><ActionLink Action="Edit" Parameters="@($"id=" + context.ModuleDefinitionId.ToString())" /></td>
            <td>
                @if (context.AssemblyName != "Oqtane.Client")
                {
                    <ActionDialog Header="Delete Module" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Module?")" Action="Delete" Security="SecurityAccessLevel.Host" Class="btn btn-danger" OnClick="@(async () => await DeleteModule(context))" />
                }
            </td>
            <td>@context.Name</td>
            <td>@context.Version</td>
            <td>
                @if (UpgradeAvailable(context.ModuleDefinitionName, context.Version))
                {
                    <button type="button" class="btn btn-success" @onclick=@(async () => await DownloadModule(context.ModuleDefinitionName, context.Version))>Upgrade</button>
                }
            </td>
        </Row>
    </Pager>
}

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Host; } }

    List<ModuleDefinition> moduledefinitions;
    List<Package> packages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            moduledefinitions = await ModuleDefinitionService.GetModuleDefinitionsAsync(PageState.Site.SiteId);
            packages = await PackageService.GetPackagesAsync("module");
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Modules {Error}", ex.Message);
            AddModuleMessage("Error Loading Modules", MessageType.Error);
        }
    }

    private bool UpgradeAvailable(string moduledefinitionname, string version)
    {
        bool upgradeavailable = false;
        Package package = packages.Where(item => item.PackageId == Utilities.GetTypeName(moduledefinitionname)).FirstOrDefault();
        if (package != null)
        {
            upgradeavailable = (Version.Parse(package.Version).CompareTo(Version.Parse(version)) > 0);
        }
        return upgradeavailable;
    }

    private async Task DownloadModule(string moduledefinitionname, string version)
    {
        try
        {
            await PackageService.DownloadPackageAsync(moduledefinitionname, version, "Modules");
            await ModuleDefinitionService.InstallModuleDefinitionsAsync();
            await logger.LogInformation("Module Downloaded {ModuleDefinitionName} {Version}", moduledefinitionname, version);
            NavigationManager.NavigateTo(NavigateUrl(Reload.Application));
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Downloading Module {ModuleDefinitionName} {Version} {Error}", moduledefinitionname, version, ex.Message);
            AddModuleMessage("Error Downloading Module", MessageType.Error);
        }
  }

    private async Task DeleteModule(ModuleDefinition ModuleDefinition)
    {
        try
        {
            await ModuleDefinitionService.DeleteModuleDefinitionAsync(ModuleDefinition.ModuleDefinitionId, ModuleDefinition.SiteId);
            await logger.LogInformation("Module Deleted {ModuleDefinition}", ModuleDefinition);
            NavigationManager.NavigateTo(NavigateUrl(Reload.Application));
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Module {ModuleDefinition} {Error}", ModuleDefinition, ex.Message);
            AddModuleMessage("Error Deleting Module", MessageType.Error);
        }
    }
}