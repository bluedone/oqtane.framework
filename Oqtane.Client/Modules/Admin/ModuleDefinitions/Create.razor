@namespace Oqtane.Modules.Admin.ModuleDefinitions
@inherits ModuleBase
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager
@inject IModuleDefinitionService ModuleDefinitionService
@inject IModuleService ModuleService
@inject ISettingService SettingService
@inject IStringLocalizer<Create> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_templates != null)
{
    <form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
        <div class="container">
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="owner" HelpText="Enter the name of the organization who is developing this module. It should not contain spaces or punctuation." ResourceKey="OwnerName">Owner Name: </Label>
                <div class="col-sm-9">
                    <input id="owner" class="form-control" @bind="@_owner" required />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="module" HelpText="Enter a name for this module. It should not contain spaces or punctuation." ResourceKey="ModuleName">Module Name: </Label>
                <div class="col-sm-9">
                    <input id="module" class="form-control" @bind="@_module" required />
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="description" HelpText="Enter a short description for the module" ResourceKey="Description">Description: </Label>
                <div class="col-sm-9">
                    <textarea id="description" class="form-control" @bind="@_description" rows="3" maxlength="2000" required></textarea>
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="template" HelpText="Select a module template. Templates are located in the wwwroot/Modules/Templates folder on the server." ResourceKey="Template">Template: </Label>
                <div class="col-sm-9">
                    <select id="template" class="form-select" @onchange="(e => TemplateChanged(e))" required>
                        <option value="-">&lt;@Localizer["Template.Select"]&gt;</option>
                        @foreach (Template template in _templates)
                        {
                            <option value="@template.Name">@template.Title</option>
                        }
                    </select>
                </div>
            </div>
            <div class="row mb-1 align-items-center">
                <Label Class="col-sm-3" For="reference" HelpText="Select a framework reference version" ResourceKey="FrameworkReference">Framework Reference: </Label>
                <div class="col-sm-9">
                    <select id="reference" class="form-select" @bind="@_reference" required>
                        @foreach (string version in _versions)
                        {
                            if (Version.Parse(version).CompareTo(Version.Parse(_minversion)) >= 0)
                            {
                                <option value="@(version)">@(version)</option>
                            }
                        }
                        <option value="local">@SharedLocalizer["LocalVersion"]</option>
                    </select>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(_location))
            {
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="location" HelpText="Location where the module will be created" ResourceKey="Location">Location: </Label>
                    <div class="col-sm-9">
                        <input id="module" class="form-control" @bind="@_location" readonly />
                    </div>
                </div>
            }
        </div>
        <button type="button" class="btn btn-success" @onclick="CreateModule">@Localizer["CreateModule"]</button>
        <NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
    </form>
}

@code {
    private ElementReference form;
    private bool validated = false;
    private string _owner = string.Empty;
    private string _module = string.Empty;
    private string _description = string.Empty;
    private List<Template> _templates;
    private string _template = "-";
    private string[] _versions;
    private string _reference = "local";
    private string _minversion = "2.0.0";
    private string _location = string.Empty;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Host;

    protected override void OnInitialized()
    {
        AddModuleMessage(Localizer["Info.Module.Development"], MessageType.Info);
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _templates = await ModuleDefinitionService.GetModuleDefinitionTemplatesAsync();
            _versions = Constants.ReleaseVersions.Split(',').Where(item => Version.Parse(item).CompareTo(Version.Parse("2.0.0")) >= 0).ToArray();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Module Creator");
        }
    }

    private async Task CreateModule()
    {
        validated = true;
        var interop = new Interop(JSRuntime);
        if (await interop.FormValid(form))
        {
            try
            {
                if (IsValid(_owner) && IsValid(_module) && _owner != _module && _template != "-")
                {
                    var moduleDefinition = new ModuleDefinition { Owner = _owner, Name = _module, Description = _description, Template = _template, Version = _reference };
                    moduleDefinition = await ModuleDefinitionService.CreateModuleDefinitionAsync(moduleDefinition);
                    GetLocation();
                    AddModuleMessage(string.Format(Localizer["Success.Module.Create"], NavigateUrl("admin/system")), MessageType.Success);
                }
                else
                {
                    AddModuleMessage(Localizer["Message.Require.ValidName"], MessageType.Warning);
                }
            }
            catch (Exception ex)
            {
                await logger.LogError(ex, "Error Creating Module");
            }
        }
        else
        {
            AddModuleMessage(SharedLocalizer["Message.InfoRequired"], MessageType.Warning);
        }
    }

    private bool IsValid(string name)
    {
        // must contain letters, underscores and digits and first character must be letter or underscore
		return !string.IsNullOrEmpty(name) && name.ToLower() != "module" && !name.ToLower().Contains("oqtane") && Regex.IsMatch(name, "^[A-Za-z_][A-Za-z0-9_]*$");
    }

    private void TemplateChanged(ChangeEventArgs e)
    {
        _template = (string)e.Value;
        _minversion = "2.0.0";
        if (_template != "-")
        {
            var template = _templates.FirstOrDefault(item => item.Name == _template);
            _minversion = template.Version;
        }
		GetLocation();
    }

    private void GetLocation()
    {
        _location = string.Empty;
        if (_owner != "" && _module != "" && _template != "-")
        {
            var template = _templates.FirstOrDefault(item => item.Name == _template);
            _location = template.Location + _owner + "." + _module;

        }
        StateHasChanged();
    }
}
