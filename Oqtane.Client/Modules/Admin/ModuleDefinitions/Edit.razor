@namespace Oqtane.Modules.Admin.ModuleDefinitions
@inherits ModuleBase
@using System.Globalization
@using Microsoft.AspNetCore.Localization
@inject IModuleDefinitionService ModuleDefinitionService
@inject IPackageService PackageService
@inject ILanguageService LanguageService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

<TabStrip>
    <TabPanel Name="Definition" ResourceKey="Definition">
        <form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
            <div class="container">
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="name" HelpText="The name of the module" ResourceKey="Name">Name: </Label>
                    <div class="col-sm-9">
                        <input id="name" class="form-control" @bind="@_name" maxlength="200" required />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="description" HelpText="The description of the module" ResourceKey="Description">Description: </Label>
                    <div class="col-sm-9">
                        <textarea id="description" class="form-control" @bind="@_description" rows="2" maxlength="2000" required></textarea>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="categories" HelpText="Comma delimited list of module categories" ResourceKey="Categories">Categories: </Label>
                    <div class="col-sm-9">
                        <input id="categories" class="form-control" @bind="@_categories" maxlength="200" required />
                    </div>
                </div>
            </div>
        </form>
        <Section Name="Information" ResourceKey="Information">
            <div class="container">
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="moduledefinitionname" HelpText="The internal name of the module" ResourceKey="InternalName">Internal Name: </Label>
                    <div class="col-sm-9">
                        <input id="moduledefinitionname" class="form-control" @bind="@_moduledefinitionname" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="version" HelpText="The version of the module" ResourceKey="Version">Version: </Label>
                    <div class="col-sm-9">
                        <input id="version" class="form-control" @bind="@_version" disabled />
                    </div>
                </div>
				<div class="row mb-1 align-items-center">
					<Label Class="col-sm-3" For="packagename" HelpText="The unique name of the package from which this module was installed" ResourceKey="PackageName">Package Name: </Label>
					<div class="col-sm-9">
						<input id="packagename" class="form-control" @bind="@_packagename" disabled />
					</div>
				</div>
				<div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="owner" HelpText="The owner or creator of the module" ResourceKey="Owner">Owner: </Label>
                    <div class="col-sm-9">
                        <input id="owner" class="form-control" @bind="@_owner" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="url" HelpText="The reference url of the module" ResourceKey="ReferenceUrl">Reference Url: </Label>
                    <div class="col-sm-9">
                        <input id="url" class="form-control" @bind="@_url" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="contact" HelpText="The contact for the module" ResourceKey="Contact">Contact: </Label>
                    <div class="col-sm-9">
                        <input id="contact" class="form-control" @bind="@_contact" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="license" HelpText="The module license terms" ResourceKey="License">License: </Label>
                    <div class="col-sm-9">
                        <textarea id="license" class="form-control" @bind="@_license" rows="5" disabled></textarea>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="runtimes" HelpText="The Blazor runtimes which this module supports" ResourceKey="Runtimes">Runtimes: </Label>
                    <div class="col-sm-9">
                        <input id="runtimes" class="form-control" @bind="@_runtimes" disabled />
                    </div>
                </div>
            </div>
		</Section>
		<br />
		<button type="button" class="btn btn-success" @onclick="SaveModuleDefinition">@SharedLocalizer["Save"]</button>
		<NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
		<br />
		<br />
		<AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
    </TabPanel>
    <TabPanel Name="Permissions" ResourceKey="Permissions">
        <div class="container">
            <div class="row mb-1 align-items-center">
                <PermissionGrid EntityName="@EntityNames.ModuleDefinition" PermissionNames="@PermissionNames.Utilize" Permissions="@_permissions" @ref="_permissionGrid" />
            </div>
        </div>
		<button type="button" class="btn btn-success" @onclick="SaveModuleDefinition">@SharedLocalizer["Save"]</button>
		<NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
    </TabPanel>
	<TabPanel Name="Translations" ResourceKey="Translations">
		@if (_languages != null && _languages.Count > 0)
		{
			<Pager Items="@_languages">
				<Header>
					<th>@SharedLocalizer["Name"]</th>
					<th>@Localizer["Code"]</th>
					<th>@Localizer["Version"]</th>
					<th style="width: 1px;">&nbsp;</th>
				</Header>
				<Row>
					<td>@context.Name</td>
					<td>@context.Code</td>
					<td>@context.Version</td>
					<td>
						@if (context.IsDefault)
						{
							<button type="button" class="btn btn-primary" @onclick=@(async () => await GetPackage(_packagename + "." + context.Code))>@SharedLocalizer["Download"]</button>
						}
						else
						{
							if (UpgradeAvailable(_packagename + "." + context.Code, context.Version))
							{
								<button type="button" class="btn btn-primary" @onclick=@(async () => await DownloadPackage(_packagename + "." + context.Code))>@SharedLocalizer["Upgrade"]</button>
							}
						}
					</td>
				</Row>
			</Pager>
			<button type="button" class="btn btn-success" @onclick="InstallTranslations">@SharedLocalizer["Install"]</button>
		}
		else
		{
			<br />
			<div class="mx-auto text-center">
				@Localizer["Search.NoResults"]
			</div>
			<br />
		}
	</TabPanel>
</TabStrip>

@if (_productname != "")
{
	<div class="app-actiondialog">
		<div class="modal" tabindex="-1" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">@SharedLocalizer["Review License Terms"]</h5>
						<button type="button" class="btn-close" aria-label="Close" @onclick="HideModal"></button>
					</div>
					<div class="modal-body">
						<p style="height: 200px; overflow-y: scroll;">
							<h3>@_productname</h3>
							@if (!string.IsNullOrEmpty(_packagelicense))
							{
								@((MarkupString)_packagelicense)
							}
							else
							{
								@SharedLocalizer["License Not Specified"]
							}
						</p>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-success" @onclick=@(async () => await DownloadPackage(_packageid))>@SharedLocalizer["Accept"]</button>
						<button type="button" class="btn btn-secondary" @onclick="HideModal">@SharedLocalizer["Cancel"]</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private ElementReference form;
	private bool validated = false;
	private int _moduleDefinitionId;
	private string _name;
	private string _description = "";
	private string _categories;
	private string _moduledefinitionname = "";
	private string _version;
	private string _packagename = "";
	private string _owner = "";
	private string _url = "";
	private string _contact = "";
	private string _license = "";
	private string _runtimes = "";
	private string _permissions;
	private string _createdby;
	private DateTime _createdon;
	private string _modifiedby;
	private DateTime _modifiedon;

#pragma warning disable 649
	private PermissionGrid _permissionGrid;
#pragma warning restore 649

	private List<Package> _packages;
	private List<Language> _languages;
	private string _productname = "";
	private string _packagelicense = "";
	private string _packageid = "";

	public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			_moduleDefinitionId = Int32.Parse(PageState.QueryString["id"]);
			var moduleDefinition = await ModuleDefinitionService.GetModuleDefinitionAsync(_moduleDefinitionId, ModuleState.SiteId);
			if (moduleDefinition != null)
			{
				_name = moduleDefinition.Name;
				_description = moduleDefinition.Description;
				_categories = moduleDefinition.Categories;
				_moduledefinitionname = moduleDefinition.ModuleDefinitionName;
				_version = moduleDefinition.Version;
				_packagename = moduleDefinition.PackageName;
				_owner = moduleDefinition.Owner;
				_url = moduleDefinition.Url;
				_contact = moduleDefinition.Contact;
				_license = moduleDefinition.License;
				_runtimes = moduleDefinition.Runtimes;
				_permissions = moduleDefinition.Permissions;
				_createdby = moduleDefinition.CreatedBy;
				_createdon = moduleDefinition.CreatedOn;
				_modifiedby = moduleDefinition.ModifiedBy;
				_modifiedon = moduleDefinition.ModifiedOn;

				if (!string.IsNullOrEmpty(_packagename))
				{
					_packages = await PackageService.GetPackagesAsync("translation", "", "", _packagename);
					_languages = await LanguageService.GetLanguagesAsync(-1, _packagename);
					foreach (var package in _packages)
					{
						var code = package.PackageId.Split('.').Last();
						if (!_languages.Any(item => item.Code == code))
						{
							_languages.Add(new Language { Code = code, Name = CultureInfo.GetCultureInfo(code).DisplayName, Version = package.Version, IsDefault = true });
						}
					}
					_languages = _languages.OrderBy(item => item.Name).ToList();
				}
			}
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Loading ModuleDefinition {ModuleDefinitionId} {Error}", _moduleDefinitionId, ex.Message);
			AddModuleMessage(Localizer["Error.Module.Load"], MessageType.Error);
		}
	}

	private async Task SaveModuleDefinition()
	{
		validated = true;
		var interop = new Interop(JSRuntime);
		if (await interop.FormValid(form))
		{
			try
			{
				var moduledefinition = await ModuleDefinitionService.GetModuleDefinitionAsync(_moduleDefinitionId, ModuleState.SiteId);
				if (moduledefinition.Name != _name)
				{
					moduledefinition.Name = _name;
				}
				if (moduledefinition.Description != _description)
				{
					moduledefinition.Description = _description;
				}
				if (moduledefinition.Categories != _categories)
				{
					moduledefinition.Categories = _categories;
				}
				moduledefinition.Permissions = _permissionGrid.GetPermissions();
				await ModuleDefinitionService.UpdateModuleDefinitionAsync(moduledefinition);
				await logger.LogInformation("ModuleDefinition Saved {ModuleDefinition}", moduledefinition);
				NavigationManager.NavigateTo(NavigateUrl());
			}
			catch (Exception ex)
			{
				await logger.LogError(ex, "Error Saving ModuleDefinition {ModuleDefinitionId} {Error}", _moduleDefinitionId, ex.Message);
				AddModuleMessage(Localizer["Error.Module.Save"], MessageType.Error);
			}
		}
		else
		{
			AddModuleMessage(SharedLocalizer["Message.InfoRequired"], MessageType.Warning);
		}
	}

	private void HideModal()
	{
		_productname = "";
		_packagelicense = "";
		StateHasChanged();
	}

	private bool UpgradeAvailable(string packagename, string version)
	{
		var upgradeavailable = false;
		if (_packages != null)
		{
			var package = _packages.Where(item => item.PackageId == packagename).FirstOrDefault();
			if (package != null)
			{
				upgradeavailable = (Version.Parse(package.Version).CompareTo(Version.Parse(version)) > 0);
			}

		}
		return upgradeavailable;
	}

	private async Task GetPackage(string packagename)
	{
		var version = _packages.Where(item => item.PackageId == packagename).FirstOrDefault().Version;
		try
		{
			var package = await PackageService.GetPackageAsync(packagename, version);
			if (package != null)
			{
				_productname = package.Name;
				if (!string.IsNullOrEmpty(package.License))
				{
					_packagelicense = package.License.Replace("\n", "<br />");
				}
				_packageid = package.PackageId;
			}
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Getting Package {PackageId} {Version}", packagename, version);
			AddModuleMessage(Localizer["Error.Translation.Download"], MessageType.Error);
		}
	}

	private async Task DownloadPackage(string packagename)
	{
		try
		{
			var version = _packages.Where(item => item.PackageId == packagename).FirstOrDefault().Version;
			await PackageService.DownloadPackageAsync(packagename, version, Constants.PackagesFolder);
			await logger.LogInformation("Package {PackageId} {Version} Downloaded Successfully", packagename, version);
			AddModuleMessage(Localizer["Success.Translation.Download"], MessageType.Success);
			_productname = "";
			_packagelicense = "";
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Downloading Package {PackageId} {Version}", _packagename, _version);
			AddModuleMessage(Localizer["Error.Translation.Download"], MessageType.Error);
		}
	}

	private async Task InstallTranslations()
	{
		try
		{
			await PackageService.InstallPackagesAsync();
			AddModuleMessage(string.Format(Localizer["Success.Translation.Install"], NavigateUrl("admin/system")), MessageType.Success);
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Installing Translations");
		}
	}
}
