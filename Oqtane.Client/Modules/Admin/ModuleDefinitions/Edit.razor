@namespace Oqtane.Modules.Admin.ModuleDefinitions
@inherits ModuleBase
@inject IModuleDefinitionService ModuleDefinitionService
@inject IPackageService PackageService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

<TabStrip>
    <TabPanel Name="Definition" ResourceKey="Definition">
        <form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
            <div class="container">
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="name" HelpText="The name of the module" ResourceKey="Name">Name: </Label>
                    <div class="col-sm-9">
                        <input id="name" class="form-control" @bind="@_name" maxlength="200" required />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="description" HelpText="The description of the module" ResourceKey="Description">Description: </Label>
                    <div class="col-sm-9">
                        <textarea id="description" class="form-control" @bind="@_description" rows="2" maxlength="2000" required></textarea>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="categories" HelpText="Comma delimited list of module categories" ResourceKey="Categories">Categories: </Label>
                    <div class="col-sm-9">
                        <input id="categories" class="form-control" @bind="@_categories" maxlength="200" required />
                    </div>
                </div>
            </div>
        </form>
        <Section Name="Information" ResourceKey="Information">
            <div class="container">
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="moduledefinitionname" HelpText="The internal name of the module" ResourceKey="InternalName">Internal Name: </Label>
                    <div class="col-sm-9">
                        <input id="moduledefinitionname" class="form-control" @bind="@_moduledefinitionname" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="version" HelpText="The version of the module" ResourceKey="Version">Version: </Label>
                    <div class="col-sm-9">
                        <input id="version" class="form-control" @bind="@_version" disabled />
                    </div>
                </div>
				<div class="row mb-1 align-items-center">
					<Label Class="col-sm-3" For="packagename" HelpText="The unique name of the package from which this module was installed" ResourceKey="PackageName">Package Name: </Label>
					<div class="col-sm-9">
						<input id="packagename" class="form-control" @bind="@_packagename" disabled />
					</div>
				</div>
				<div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="owner" HelpText="The owner or creator of the module" ResourceKey="Owner">Owner: </Label>
                    <div class="col-sm-9">
                        <input id="owner" class="form-control" @bind="@_owner" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="url" HelpText="The reference url of the module" ResourceKey="ReferenceUrl">Reference Url: </Label>
                    <div class="col-sm-9">
                        <input id="url" class="form-control" @bind="@_url" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="contact" HelpText="The contact for the module" ResourceKey="Contact">Contact: </Label>
                    <div class="col-sm-9">
                        <input id="contact" class="form-control" @bind="@_contact" disabled />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="license" HelpText="The module license terms" ResourceKey="License">License: </Label>
                    <div class="col-sm-9">
                        <textarea id="license" class="form-control" @bind="@_license" rows="5" disabled></textarea>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="runtimes" HelpText="The Blazor runtimes which this module supports" ResourceKey="Runtimes">Runtimes: </Label>
                    <div class="col-sm-9">
                        <input id="runtimes" class="form-control" @bind="@_runtimes" disabled />
                    </div>
                </div>
            </div>
		</Section>
		<br />
		<button type="button" class="btn btn-success" @onclick="SaveModuleDefinition">@SharedLocalizer["Save"]</button>
		<NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
		<br />
		<br />
		<AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
    </TabPanel>
    <TabPanel Name="Permissions" ResourceKey="Permissions">
        <div class="container">
            <div class="row mb-1 align-items-center">
                <PermissionGrid EntityName="@EntityNames.ModuleDefinition" PermissionNames="@PermissionNames.Utilize" Permissions="@_permissions" @ref="_permissionGrid" />
            </div>
        </div>
		<button type="button" class="btn btn-success" @onclick="SaveModuleDefinition">@SharedLocalizer["Save"]</button>
		<NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
    </TabPanel>
	<TabPanel Name="Translations" ResourceKey="Translations">
		@if (_packages != null)
		{
			if (_packages.Count > 0)
			{
				<Pager Items="@_packages">
					<Row>
						<td>
							<h3 style="display: inline;"><a href="@context.ProductUrl" target="_new">@context.Name</a></h3>&nbsp;&nbsp;by:&nbsp;&nbsp;<strong><a href="@context.OwnerUrl" target="new">@context.Owner</a></strong><br />
							@(context.Description.Length > 400 ? (context.Description.Substring(0, 400) + "...") : context.Description)<br />
							<strong>@(String.Format("{0:n0}", context.Downloads))</strong> @SharedLocalizer["Search.Downloads"]&nbsp;&nbsp;|&nbsp;&nbsp;
							@SharedLocalizer["Search.Released"]: <strong>@context.ReleaseDate.ToString("MMM dd, yyyy")</strong>&nbsp;&nbsp;|&nbsp;&nbsp;
							@SharedLocalizer["Search.Version"]: <strong>@context.Version</strong>
							@((MarkupString)(!string.IsNullOrEmpty(context.PackageUrl) ? "&nbsp;&nbsp;|&nbsp;&nbsp;" + SharedLocalizer["Search.Source"] + ": <strong>" + new Uri(context.PackageUrl).Host + "</strong>" : ""))
							@((MarkupString)(context.TrialPeriod > 0 ? "&nbsp;&nbsp;|&nbsp;&nbsp;<strong>" + context.TrialPeriod + " " + @SharedLocalizer["Trial"] + "</strong>" : ""))
						</td>
						<td style="width: 1px; vertical-align: middle;">
							@if (context.Price != null && !string.IsNullOrEmpty(context.PackageUrl))
							{
								<button type="button" class="btn btn-primary" @onclick=@(async () => await GetPackage(context.PackageId, context.Version))>@SharedLocalizer["Download"]</button>
							}
						</td>
						<td style="width: 1px; vertical-align: middle;">
							@if (context.Price != null && !string.IsNullOrEmpty(context.PaymentUrl))
							{
								<a class="btn btn-primary" style="text-decoration: none !important" href="@context.PaymentUrl" target="_new">@context.Price.Value.ToString("$#,##0.00")</a>
							}
							else
							{
								<button type="button" class="btn btn-primary" @onclick=@(async () => await GetPackage(context.PackageId, context.Version))>@SharedLocalizer["Download"]</button>
							}
						</td>
					</Row>
				</Pager>
				<button type="button" class="btn btn-success" @onclick="InstallTranslations">@SharedLocalizer["Install"]</button>
			}
			else
			{
				<br />
				<div class="mx-auto text-center">
					@Localizer["Search.NoResults"]
				</div>
			}
		}
	</TabPanel>
</TabStrip>

@if (_productname != "")
{
	<div class="app-actiondialog">
		<div class="modal" tabindex="-1" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">@SharedLocalizer["Review License Terms"]</h5>
						<button type="button" class="btn-close" aria-label="Close" @onclick="HideModal"></button>
					</div>
					<div class="modal-body">
						<p style="height: 200px; overflow-y: scroll;">
							<h3>@_productname</h3>
							@if (!string.IsNullOrEmpty(_packagelicense))
							{
								@((MarkupString)_packagelicense)
							}
							else
							{
								@SharedLocalizer["License Not Specified"]
							}
						</p>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-success" @onclick="DownloadTranslation">@SharedLocalizer["Accept"]</button>
						<button type="button" class="btn btn-secondary" @onclick="HideModal">@SharedLocalizer["Cancel"]</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
    private ElementReference form;
    private bool validated = false;
    private int _moduleDefinitionId;
    private string _name;
	private string _description = "";
	private string _categories;
    private string _moduledefinitionname = "";
	private string _version;
	private string _packagename = "";
	private string _owner = "";
    private string _url = "";
    private string _contact = "";
    private string _license = "";
    private string _runtimes = "";
    private string _permissions;
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;

#pragma warning disable 649
    private PermissionGrid _permissionGrid;
#pragma warning restore 649

	private List<Package> _packages;
	private string _productname = "";
	private string _packageid = "";
	private string _packagelicense = "";
	private string _packageversion = "";

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _moduleDefinitionId = Int32.Parse(PageState.QueryString["id"]);
            var moduleDefinition = await ModuleDefinitionService.GetModuleDefinitionAsync(_moduleDefinitionId, ModuleState.SiteId);
            if (moduleDefinition != null)
            {
                _name = moduleDefinition.Name;
				_description = moduleDefinition.Description;
                _categories = moduleDefinition.Categories;
                _moduledefinitionname = moduleDefinition.ModuleDefinitionName;
				_version = moduleDefinition.Version;
				_packagename = moduleDefinition.PackageName;
				_owner = moduleDefinition.Owner;
                _url = moduleDefinition.Url;
                _contact = moduleDefinition.Contact;
                _license = moduleDefinition.License;
                _runtimes = moduleDefinition.Runtimes;
                _permissions = moduleDefinition.Permissions;
                _createdby = moduleDefinition.CreatedBy;
                _createdon = moduleDefinition.CreatedOn;
                _modifiedby = moduleDefinition.ModifiedBy;
                _modifiedon = moduleDefinition.ModifiedOn;

				_packages = await PackageService.GetPackagesAsync("translation", "", "", moduleDefinition.PackageName);
			}
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading ModuleDefinition {ModuleDefinitionId} {Error}", _moduleDefinitionId, ex.Message);
            AddModuleMessage(Localizer["Error.Module.Load"], MessageType.Error);
        }
    }

    private async Task SaveModuleDefinition()
    {
        validated = true;
        var interop = new Interop(JSRuntime);
        if (await interop.FormValid(form))
        {
            try
            {
                var moduledefinition = await ModuleDefinitionService.GetModuleDefinitionAsync(_moduleDefinitionId, ModuleState.SiteId);
                if (moduledefinition.Name != _name)
                {
                    moduledefinition.Name = _name;
                }
                if (moduledefinition.Description != _description)
                {
                    moduledefinition.Description = _description;
                }
                if (moduledefinition.Categories != _categories)
                {
                    moduledefinition.Categories = _categories;
                }
                moduledefinition.Permissions = _permissionGrid.GetPermissions();
                await ModuleDefinitionService.UpdateModuleDefinitionAsync(moduledefinition);
                await logger.LogInformation("ModuleDefinition Saved {ModuleDefinition}", moduledefinition);
                NavigationManager.NavigateTo(NavigateUrl());
            }
            catch (Exception ex)
            {
                await logger.LogError(ex, "Error Saving ModuleDefinition {ModuleDefinitionId} {Error}", _moduleDefinitionId, ex.Message);
                AddModuleMessage(Localizer["Error.Module.Save"], MessageType.Error);
            }
        }
        else
        {
            AddModuleMessage(SharedLocalizer["Message.InfoRequired"], MessageType.Warning);
        }
    }

	private void HideModal()
	{
		_productname = "";
		_packagelicense = "";
		StateHasChanged();
	}
	
	private async Task GetPackage(string packageid, string version)
	{
		try
		{
			var package = await PackageService.GetPackageAsync(packageid, version);
			if (package != null)
			{
				_productname = package.Name;
				_packageid = package.PackageId;
				if (!string.IsNullOrEmpty(package.License))
				{
					_packagelicense = package.License.Replace("\n", "<br />");
				}
				_packageversion = package.Version;
			}
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Getting Package {PackageId} {Version}", packageid, version);
			AddModuleMessage(Localizer["Error.Translation.Download"], MessageType.Error);
		}
	}

	private async Task DownloadTranslation()
	{
		try
		{
			await PackageService.DownloadPackageAsync(_packageid, _version, Constants.PackagesFolder);
			await logger.LogInformation("Package {PackageId} {Version} Downloaded Successfully", _packageid, _version);
			AddModuleMessage(Localizer["Success.Translation.Download"], MessageType.Success);
			_productname = "";
			_packagelicense = "";
			StateHasChanged();
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Downloading Package {PackageId} {Version}", _packageid, _version);
			AddModuleMessage(Localizer["Error.Translation.Download"], MessageType.Error);
		}
	}

	private async Task InstallTranslations()
	{
		try
		{
			await PackageService.InstallPackagesAsync();
			AddModuleMessage(string.Format(Localizer["Success.Translation.Install"], NavigateUrl("admin/system")), MessageType.Success);
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Installing Translations");
		}
	}
}
