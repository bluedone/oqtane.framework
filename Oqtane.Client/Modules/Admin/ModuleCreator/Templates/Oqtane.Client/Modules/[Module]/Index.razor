@namespace Oqtane.Modules.[Module]s
@using Oqtane.Services.[Module]s
@using Oqtane.Models.[Module]s
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject I[Module]Service [Module]Service

@if (_[Module]s == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add [Module]" />
    <br /><br />
    <Pager Items="@_[Module]s" Format="Grid">
        <Row>
            <div class="col">
                <ActionLink Action="Edit" Parameters="@($"id=" + context.[Module]Id.ToString())" />
                <ActionDialog Header="Delete [Module]" Message="@("Are You Sure You Wish To Delete The " + context.Name + " [Module]?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" />
                @context.Name
            </div>
        </Row>
    </Pager>
}

<hr />
[Module] Module Created Successfully. You Can Access The Files At The Following Locations:<br /><br />
C:\Users\Shaun.Walker\Source\Repos\sbwalker\oqtane.framework\Oqtane.Client\Modules\[Module]\<br />
- Index.razor - main component for your module<br />
- Edit.razor - component for adding or editing content<br />
- Settings.razor - component for managing module settings<br />
- Module.cs - implements IModule interface to provide configuration settings for your module<br />
- Services\I[Module]Service.cs - interface for defining service API methods<br />
- Services\[Module]Service.cs - implements service API interface methods<br /><br />
C:\Users\Shaun.Walker\Source\Repos\sbwalker\oqtane.framework\Oqtane.Server\Modules\[Module]\<br />
- Controllers\[Module]Controller.cs - API methods implemented using a REST pattern<br />
- Manager\[Module]Manager.cs - implements optional module interfaces for features such as import/export of content<br />
- Repository\I[Module]Repository.cs - interface for defining repository methods<br />
- Repository\[Module]Respository.cs - implements repository interface methods for data access using EF Core<br />
- Repository\[Module]Context.cs - provides a DB Context for data access<br />
- Scripts\01.00.00.sql - database schema definition<br /><br />
C:\Users\Shaun.Walker\Source\Repos\sbwalker\oqtane.framework\Oqtane.Shared\Modules\Models\[Module]\<br />
- [Module].cs - model definition<br /><br />

@code {
    List<[Module]> _[Module]s;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _[Module]s = await [Module]Service.Get[Module]sAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading [Module] {Error}", ex.Message);
            AddModuleMessage("Error Loading [Module]", MessageType.Error);
        }
    }

    private async Task Delete([Module] [Module])
    {
        try
        {
            await [Module]Service.Delete[Module]Async([Module].[Module]Id);
            await logger.LogInformation("[Module] Deleted {[Module]}", [Module]);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting [Module] {[Module]} {Error}", [Module], ex.Message);
            AddModuleMessage("Error Deleting [Module]", MessageType.Error);
        }
    }
}