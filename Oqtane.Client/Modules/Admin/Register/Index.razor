@namespace Oqtane.Modules.Admin.Register
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IStringLocalizer<Index> Localizer

@if (PageState.Site.AllowRegistration)
{
    <AuthorizeView Roles="@RoleNames.Registered">
        <Authorizing>
            <text>...</text>
        </Authorizing>
        <Authorized>
            <ModuleMessage Message="@Localizer["Info.Registration.Exists"]" Type="MessageType.Info" />            
        </Authorized>
        <NotAuthorized>
            <ModuleMessage Message="@Localizer["Info.Registration.InvalidEmail"]" Type="MessageType.Info" />

            <div class="container">
                <div class="form-group">
                    <label for="Username" class="control-label">@Localizer["Username"] </label>
                    <input type="text" class="form-control" placeholder="Username" @bind="@_username" id="Username" />
                </div>
                <div class="form-group">
                    <label for="Password" class="control-label">@Localizer["Password"] </label>
                    <input type="password" class="form-control" placeholder="Password" @bind="@_password" id="Password" />
                </div>
                <div class="form-group">
                    <label for="Confirm" class="control-label">@Localizer["Password.Confirm"] </label>
                    <input type="password" class="form-control" placeholder="Password" @bind="@_confirm" id="Confirm" />
                </div>
                <div class="form-group">
                    <label for="Email" class="control-label">@Localizer["Email"] </label>
                    <input type="text" class="form-control" placeholder="Email" @bind="@_email" id="Email" />
                </div>
                <div class="form-group">
                    <label for="DisplayName" class="control-label">@Localizer["FullName"] </label>
                    <input type="text" class="form-control" placeholder="Full Name" @bind="@_displayName" id="DisplayName" />
                </div>
                <button type="button" class="btn btn-primary" @onclick="Register">@Localizer["Register"]</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">@Localizer["Cancel"]</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <ModuleMessage Message="@Localizer["Info.Registration.Disabled"]" Type="MessageType.Info" />
}

@code {
    private string _username = string.Empty;
    private string _password = string.Empty;
    private string _confirm = string.Empty;
    private string _email = string.Empty;
    private string _displayName = string.Empty;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Anonymous;

    private async Task Register()
    {
        try
        {
            bool _isEmailValid = Utilities.IsValidEmail(_email);

            if (_username != "" && _password != "" && _confirm != "" && _isEmailValid)
            {
                if (_password == _confirm)
                {
                    var user = new User
                    {
                        SiteId = PageState.Site.SiteId,
                        Username = _username,
                        DisplayName = (_displayName == string.Empty ? _username : _displayName),
                        Email = _email,
                        Password = _password
                    };
                    user = await UserService.AddUserAsync(user);

                    if (user != null)
                    {
                        await logger.LogInformation("User Created {Username} {Email}", _username, _email);
                        AddModuleMessage(Localizer["Info.User.AccountCreate"], MessageType.Info);
                    }
                    else
                    {
                        await logger.LogError("Error Adding User {Username} {Email}", _username, _email);
                        AddModuleMessage(Localizer["Error.User.AddInfo"], MessageType.Error);
                    }
                }
                else
                {
                    AddModuleMessage(Localizer["Message.Password.NoMatch"], MessageType.Warning);
                }
            }
            else
            {
                AddModuleMessage(Localizer["Message.Required.UserInfo"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding User {Username} {Email} {Error}", _username, _email, ex.Message);
            AddModuleMessage(Localizer["Error.User.Add"], MessageType.Error);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo(NavigateUrl(string.Empty));
    }
}