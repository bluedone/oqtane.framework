@namespace Oqtane.Modules.Admin.Register
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (PageState.Site.AllowRegistration)
{
    <AuthorizeView Roles="@RoleNames.Registered">
        <Authorizing>
            <text>...</text>
        </Authorizing>
        <Authorized>
            <ModuleMessage Message="@Localizer["Info.Registration.Exists"]" Type="MessageType.Info" />
        </Authorized>
        <NotAuthorized>
            <ModuleMessage Message="@Localizer["Info.Registration.InvalidEmail"]" Type="MessageType.Info" />

            <table class="table table-borderless">
                <tr>
                    <td width="30%">
                        <Label For="username" HelpText="Your username. Note that this field can not be modified once it is saved." ResourceKey="Username"></Label>
                    </td>
                    <td>
                        <input id="username" class="form-control" @bind="@_username" readonly />
                    </td>
                </tr>
                <tr>
                    <td>
                        <Label For="password" HelpText="If you wish to change your password you can enter it here. Please choose a sufficiently secure password." ResourceKey="Password"></Label>
                    </td>
                    <td>
                        <input id="password" type="password" class="form-control" @bind="@_password" autocomplete="new-password" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <Label For="confirm" HelpText="If you are changing your password you must enter it again to confirm it matches" ResourceKey="Confirm"></Label>
                    </td>
                    <td>
                        <input id="confirm" type="password" class="form-control" @bind="@_confirm" autocomplete="new-password" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <Label For="email" HelpText="Your email address where you wish to receive notifications" ResourceKey="Email"></Label>
                    </td>
                    <td>
                        <input id="email" class="form-control" @bind="@_email" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <Label For="displayname" HelpText="Your full name" ResourceKey="DisplayName"></Label>
                    </td>
                    <td>
                        <input id="displayname" class="form-control" @bind="@_displayname" />
                    </td>
                </tr>
            </table>

            <button type="button" class="btn btn-primary" @onclick="Register">@Localizer["Register"]</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">@SharedLocalizer["Cancel"]</button>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <ModuleMessage Message="@Localizer["Info.Registration.Disabled"]" Type="MessageType.Info" />
}

@code {
    private string _username = string.Empty;
    private string _password = string.Empty;
    private string _confirm = string.Empty;
    private string _email = string.Empty;
    private string _displayname = string.Empty;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Anonymous;

    private async Task Register()
    {
        try
        {
            bool _isEmailValid = Utilities.IsValidEmail(_email);

            if (_username != "" && _password != "" && _confirm != "" && _isEmailValid)
            {
                if (_password == _confirm)
                {
                    var user = new User
                    {
                        SiteId = PageState.Site.SiteId,
                        Username = _username,
                        DisplayName = (_displayname == string.Empty ? _username : _displayname),
                        Email = _email,
                        Password = _password
                    };
                    user = await UserService.AddUserAsync(user);

                    if (user != null)
                    {
                        await logger.LogInformation("User Created {Username} {Email}", _username, _email);
                        AddModuleMessage(Localizer["Info.User.AccountCreate"], MessageType.Info);
                    }
                    else
                    {
                        await logger.LogError("Error Adding User {Username} {Email}", _username, _email);
                        AddModuleMessage(Localizer["Error.User.AddInfo"], MessageType.Error);
                    }
                }
                else
                {
                    AddModuleMessage(Localizer["Message.Password.NoMatch"], MessageType.Warning);
                }
            }
            else
            {
                AddModuleMessage(Localizer["Message.Required.UserInfo"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding User {Username} {Email} {Error}", _username, _email, ex.Message);
            AddModuleMessage(Localizer["Error.User.Add"], MessageType.Error);
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo(NavigateUrl(string.Empty));
    }
}