@namespace Oqtane.Modules.Admin.Languages
@inherits ModuleBase
@inject ILanguageService LanguageService
@inject ILocalizationService LocalizationService
@inject IStringLocalizer<Index> Localizer

@if (_languages == null)
{
    <p><em>@Localizer["Loading..."]</em></p>
}
else
{
    <ActionLink Action="Add" Text="Add Language" ResourceKey="AddLanguage" />

    <Pager Items="@_languages">
        <Header>
            <th style="width: 1px;">&nbsp;</th>
            <th>@Localizer["Name"]</th>
            <th>@Localizer["Code"]</th>
            <th>@Localizer["Default?"]</th>
        </Header>
        <Row>
            <td><ActionDialog Header="Delete Langauge" Message="@Localizer["Are You Sure You Wish To Delete The {0} Language From This Site?", context.Name]" Action="Delete" Security="SecurityAccessLevel.Admin" Class="btn btn-danger" OnClick="@(async () => await DeleteLanguage(context))" Disabled="@(context.IsDefault)" ResourceKey="DeleteLanguage" /></td>
            <td>@context.Name</td>
            <td>@context.Code</td>
            <td><TriStateCheckBox Value="@(context.IsDefault)" Disabled="true"></TriStateCheckBox></td>
        </Row>
    </Pager>
}

@code {
    private List<Language> _languages;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnParametersSetAsync()
    {
        _languages = await LanguageService.GetLanguagesAsync(PageState.Site.SiteId);
        if (_languages.Count == 0)
        {
            var cultures = await LocalizationService.GetCulturesAsync();
            var culture = cultures.First(c => c.Name.Equals(Constants.DefaultCulture));
            _languages.Add(new Language { Name = culture.DisplayName, Code = culture.Name, IsDefault = culture.IsDefault });
        }
    }

    private async Task DeleteLanguage(Language language)
    {
        try
        {
            await LanguageService.DeleteLanguageAsync(language.LanguageId);
            await logger.LogInformation("Language Deleted {Language}", language);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Language {Language} {Error}", language, ex.Message);

            AddModuleMessage(Localizer["Error Deleting Language"], MessageType.Error);
        }
    }
}
