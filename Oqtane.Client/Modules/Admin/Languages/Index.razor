@namespace Oqtane.Modules.Admin.Languages
@inherits ModuleBase
@inject ILanguageService LanguageService
@inject ILocalizationService LocalizationService
@inject IPackageService PackageService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_languages == null)
{
    <p><em>@SharedLocalizer["Loading"]</em></p>
}
else
{
    <ActionLink Action="Add" Text="Add Language" ResourceKey="AddLanguage" />

    <Pager Items="@_languages">
        <Header>
            <th style="width: 1px;">&nbsp;</th>
            <th>@SharedLocalizer["Name"]</th>
            <th>@Localizer["Code"]</th>
			<th>@Localizer["Translation"]</th>
            <th>@Localizer["Default"]</th>
			<th style="width: 1px;">&nbsp;</th>
        </Header>
        <Row>
            <td><ActionDialog Header="Delete Language" Message="@string.Format(Localizer["Confirm.Language.Delete"], context.Name)" Action="Delete" Security="SecurityAccessLevel.Admin" Class="btn btn-danger" OnClick="@(async () => await DeleteLanguage(context))" Disabled="@((context.IsDefault && _languages.Count > 2) || context.Code == Constants.DefaultCulture)" ResourceKey="DeleteLanguage" /></td>
            <td>@context.Name</td>
            <td>@context.Code</td>
			<td>@context.Version</td>
			<td><TriStateCheckBox Value="@(context.IsDefault)" Disabled="true"></TriStateCheckBox></td>
			<td>
                @if (UpgradeAvailable(context.Code, context.Version))
                {
                    <button type="button" class="btn btn-success" @onclick=@(async () => await DownloadLanguage(context.Code))>@SharedLocalizer["Upgrade"]</button>
                }
            </td>
        </Row>
    </Pager>
}

@code {
	private List<Language> _languages;
	private List<Package> _packages;

	public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

	protected override async Task OnParametersSetAsync()
	{
		_languages = await LanguageService.GetLanguagesAsync(PageState.Site.SiteId, Constants.ClientId);

		var cultures = await LocalizationService.GetCulturesAsync();
        var culture = cultures.First(c => c.Name.Equals(Constants.DefaultCulture));

        if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Host))
        {
            _packages = await PackageService.GetPackagesAsync("translation");			
        }
    }

    private async Task DeleteLanguage(Language language)
    {
        try
        {
            await LanguageService.DeleteLanguageAsync(language.LanguageId);
            await logger.LogInformation("Language Deleted {Language}", language);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Language {Language} {Error}", language, ex.Message);

            AddModuleMessage(Localizer["Error.Language.Delete"], MessageType.Error);
        }
    }

    private bool UpgradeAvailable(string code, string version)
    {
        var upgradeavailable = false;
        if (_packages != null && version != null)
        {
			var package = _packages.Where(item => item.PackageId == (Constants.PackageId + "." + code)).FirstOrDefault();
			if (package != null)
            {
				upgradeavailable = (Version.Parse(package.Version).CompareTo(Version.Parse(Constants.Version)) == 0) &&
					(Version.Parse(package.Version).CompareTo(Version.Parse(version)) > 0);
            }

        }
        return upgradeavailable;
    }

    private async Task DownloadLanguage(string code)
    {
        try
        {
            if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Host))
            {
                await PackageService.DownloadPackageAsync(Constants.PackageId + "." + code, Constants.Version, Constants.PackagesFolder);
                await logger.LogInformation("Translation Downloaded {Code} {Version}", code, Constants.Version);
                await PackageService.InstallPackagesAsync();
                AddModuleMessage(string.Format(Localizer["Success.Language.Install"], NavigateUrl("admin/system")), MessageType.Success);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Downloading Translation {Code} {Version} {Error}", code, Constants.Version, ex.Message);
            AddModuleMessage(Localizer["Error.Language.Download"], MessageType.Error);
        }
    }
}
