@namespace Oqtane.Modules.Admin.Files
@using System.IO
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IFileService FileService
@inject IFolderService FolderService
@inject IStringLocalizer<Add> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

<TabStrip>
    <TabPanel Name="Upload" Heading="Upload Files" ResourceKey="UploadFiles">
        <table class="table table-borderless">
            <tr>
                <td>
                    <Label For="upload" HelpText="Upload the file you want" ResourceKey="Upload">Upload: </Label>
                </td>
                <td>
                    <FileManager UploadMultiple="true" ShowFiles="false" FolderId="@_folderId" />
                </td>
            </tr>
        </table>
        <NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
    </TabPanel>
    <TabPanel Name="Download" Heading="Download Files" ResourceKey="DownloadFiles">
        @if (_folders != null)
        {
            <table class="table table-borderless">
                <tr>
                    <td>
                        <Label For="url" HelpText="Enter the url of the file you wish to download" ResourceKey="Url">Url: </Label>
                    </td>
                    <td>
                        <input id="url" class="form-control" @bind="@url" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <Label For="folder" HelpText="Select the folder to save the file in" ResourceKey="Folder">Folder: </Label>
                    </td>
                    <td>
                        <select id="folder" class="form-select" @bind="@_folderId">
                            <option value="-1">&lt;@Localizer["Folder.Select"]&gt;</option>
                            @foreach (Folder folder in _folders)
                            {
                                <option value="@(folder.FolderId)">@(new string('-', folder.Level * 2))@(folder.Name)</option>
                            }
                        </select>
                    </td>
                </tr>
            </table>
            <button type="button" class="btn btn-success" @onclick="Download">@SharedLocalizer["Download"]</button>
            <NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
        }
    </TabPanel>
</TabStrip>

@code {
    private string url = string.Empty;
    private List<Folder> _folders;
    private int _folderId = -1;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        _folders = await FolderService.GetFoldersAsync(ModuleState.SiteId);

        if (PageState.QueryString.ContainsKey("id"))
        {
            _folderId = int.Parse(PageState.QueryString["id"]);
        }
    }

    private async Task Download()
    {
        if (url == string.Empty || _folderId == -1)
        {
            AddModuleMessage(Localizer["Message.Required.UrlFolder"], MessageType.Warning);
            return;
        }

        var filename = url.Substring(url.LastIndexOf("/", StringComparison.Ordinal) + 1);

        if (!Constants.UploadableFiles.Split(',')
                .Contains(Path.GetExtension(filename).ToLower().Replace(".", "")))
        {
            AddModuleMessage(Localizer["Message.Download.InvalidExtension"], MessageType.Warning);
            return;
        }

        if (!filename.IsPathOrFileValid())
        {
            AddModuleMessage(Localizer["Message.Required.UrlName"], MessageType.Warning);
            return;
        }

        try
        {
            await FileService.UploadFileAsync(url, _folderId);
            await logger.LogInformation("File Downloaded Successfully From Url {Url}", url);
            AddModuleMessage(Localizer["Success.Download.File"], MessageType.Success);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Downloading File From Url {Url} {Error}", url, ex.Message);
            AddModuleMessage(Localizer["Error.Download.InvalidUrl"], MessageType.Error);
        }
    }
}
