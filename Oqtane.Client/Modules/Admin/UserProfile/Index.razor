@namespace Oqtane.Modules.Admin.UserProfile
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IProfileService ProfileService
@inject ISettingService SettingService
@inject INotificationService NotificationService
@inject IFileService FileService
@inject IFolderService FolderService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (PageState.User != null && photo != null)
{
    <img src="@ImageUrl(photofileid, 400, 400)" alt="@displayname" style="max-width: 400px" class="rounded-circle mx-auto d-block">
}
else
{
    <br />
}
<TabStrip>
    <TabPanel Name="Identity" ResourceKey="Identity">
        @if (profiles != null && settings != null)
        {
            <div class="container">
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="username" HelpText="Your username. Note that this field can not be modified." ResourceKey="Username"></Label>
                    <div class="col-sm-9">
                        <input id="username" class="form-control" @bind="@username" readonly />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="password" HelpText="If you wish to change your password you can enter it here. Please choose a sufficiently secure password." ResourceKey="Password"></Label>
					<div class="col-sm-9">
                        <div class="input-group">
						    <input id="password" type="@_passwordtype" class="form-control" @bind="@_password" autocomplete="new-password" />
                            <button type="button" class="btn btn-secondary" @onclick="@TogglePassword" tabindex="-1">@_togglepassword</button>
					    </div>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="confirm" HelpText="If you are changing your password you must enter it again to confirm it matches" ResourceKey="Confirm"></Label>
                    <div class="col-sm-9">
                        <div class="input-group">
							<input id="confirm" type="@_passwordtype" class="form-control" @bind="@confirm" autocomplete="new-password" />
                            <button type="button" class="btn btn-secondary" @onclick="@TogglePassword" tabindex="-1">@_togglepassword</button>
					    </div>
                    </div>
                </div>
				@if (allowtwofactor)
				{
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="twofactor" HelpText="Indicates if you are using two factor authentication. Two factor authentication requires you to enter a verification code sent via email after you sign in." ResourceKey="TwoFactor"></Label>
						<div class="col-sm-9">
							<select id="twofactor" class="form-select" @bind="@twofactor" required>
								<option value="True">@SharedLocalizer["Yes"]</option>
								<option value="False">@SharedLocalizer["No"]</option>
							</select>
						</div>
					</div>
				}
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="email" HelpText="Your email address where you wish to receive notifications" ResourceKey="Email"></Label>
                    <div class="col-sm-9">
                        <input id="email" class="form-control" @bind="@email" />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="displayname" HelpText="Your full name" ResourceKey="DisplayName"></Label>
                    <div class="col-sm-9">
                        <input id="displayname" class="form-control" @bind="@displayname" />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="@photofileid.ToString()" HelpText="A photo of yourself" ResourceKey="Photo"></Label>
                    <div class="col-sm-9">
                        <FileManager FileId="@photofileid" Filter="@Constants.ImageFiles" ShowFolders="false" ShowFiles="true" UploadMultiple="false" FolderId="@folderid" @ref="filemanager" />
                    </div>
                </div>
            </div>
            <br />
            <button type="button" class="btn btn-success" @onclick="Save">@SharedLocalizer["Save"]</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">@SharedLocalizer["Cancel"]</button>
        }
    </TabPanel>
    <TabPanel Name="Profile" ResourceKey="Profile">
        @if (profiles != null && settings != null)
        {
            <div class="container">
                <div class="row mb-1 align-items-center">
                    @foreach (Profile profile in profiles)
                    {
                        var p = profile;
                        if (!p.IsPrivate || UserSecurity.IsAuthorized(PageState.User, RoleNames.Admin))
                        {
                            if (p.Category != category)
                            {
                                <div class="col text-center pb-2">
                                    @p.Category
                                </div>
                                category = p.Category;
                            }
                            <div class="row mb-1 align-items-center">
                                <Label Class="col-sm-3" For="@p.Name" HelpText="@p.Description">@p.Title</Label>
                                <div class="col-sm-9">
                                    @if (!string.IsNullOrEmpty(p.Options))
                                    {
                                        <select id="@p.Name" class="form-select" @onchange="@(e => ProfileChanged(e, p.Name))">
                                            @foreach (var option in p.Options.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                                            {
                                                @if (GetProfileValue(p.Name, "") == option || (GetProfileValue(p.Name, "") == "" && p.DefaultValue == option))
                                                {
                                                    <option value="@option" selected>@option</option>
                                                }
                                                else
                                                {
                                                    <option value="@option">@option</option>
                                                }
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        @if (p.IsRequired)
                                        {
                                            <input id="@p.Name" class="form-control" maxlength="@p.MaxLength" value="@GetProfileValue(p.Name, p.DefaultValue)" required @onchange="@(e => ProfileChanged(e, p.Name))" />
                                        }
                                        else
                                        {
                                            <input id="@p.Name" class="form-control" maxlength="@p.MaxLength" value="@GetProfileValue(p.Name, p.DefaultValue)" @onchange="@(e => ProfileChanged(e, p.Name))" />
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
            <button type="button" class="btn btn-success" @onclick="Save">@SharedLocalizer["Save"]</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">@SharedLocalizer["Cancel"]</button>
        }
    </TabPanel>
    <TabPanel Name="Notifications" ResourceKey="Notifications">
        @if (notifications != null)
        {
            <ActionLink Action="Add" Text="Send Notification" Security="SecurityAccessLevel.View" EditMode="false" ResourceKey="SendNotification" />
            <br /><br />
            @if (filter == "to")
            {
                <Pager Items="@notifications">
                    <Header>
                        <th style="width: 1px;">&nbsp;</th>
                        <th style="width: 1px;">&nbsp;</th>
                        <th>@Localizer["From"]</th>
                        <th>@Localizer["Subject"]</th>
                        <th>@Localizer["Received"]</th>
                    </Header>
                    <Row>
                        <td><ActionLink Action="View" Parameters="@($"id=" + context.NotificationId.ToString())" Security="SecurityAccessLevel.View" EditMode="false" ResourceKey="ViewNotification" /></td>
                        <td><ActionDialog Header="Delete Notification" Message="Are You Sure You Wish To Delete This Notification?" Action="Delete" Security="SecurityAccessLevel.View" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" EditMode="false" ResourceKey="DeleteNotification" /></td>
                        <td>@context.FromDisplayName</td>
                        <td>@context.Subject</td>
                        <td>@string.Format("{0:dd-MMM-yyyy HH:mm:ss}", @context.CreatedOn)</td>
                    </Row>
                    <Detail>
                        <td colspan="2"></td>
                        <td colspan="3">
                            @{
                                        string input = "___";
                                        if (context.Body.Contains(input))
                                        {
                                            context.Body = context.Body.Split(input)[0];
                                            context.Body = context.Body.Replace("\n", "");
                                            context.Body = context.Body.Replace("\r", "");
                                        } }
                            @(context.Body.Length > 100 ? (context.Body.Substring(0, 97) + "...") : context.Body)
                        </td>
                    </Detail>
                </Pager>
            }
            else
            {
                <Pager Items="@notifications">
                    <Header>
                        <th>&nbsp;</th>
                        <th>&nbsp;</th>
                        <th>@Localizer["To"]</th>
                        <th>@Localizer["Subject"]</th>
                        <th>@Localizer["Sent"]</th>
                    </Header>
                    <Row>
                        <td><ActionLink Action="View" Parameters="@($"id=" + context.NotificationId.ToString())" Security="SecurityAccessLevel.View" EditMode="false" ResourceKey="ViewNotification" /></td>
                        <td><ActionDialog Header="Delete Notification" Message="Are You Sure You Wish To Delete This Notification?" Action="Delete" Security="SecurityAccessLevel.View" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" EditMode="false" ResourceKey="DeleteNotification" /></td>
                        <td>@context.ToDisplayName</td>
                        <td>@context.Subject</td>
                        <td>@string.Format("{0:dd-MMM-yyyy HH:mm:ss}", @context.CreatedOn)</td>
                    </Row>
                    <Detail>
                        <td colspan="2"></td>
                        <td colspan="3">
                            @{
                                        string input = "___";
                                        if (context.Body.Contains(input))
                                        {
                                            context.Body = context.Body.Split(input)[0];
                                            context.Body = context.Body.Replace("\n", "");
                                            context.Body = context.Body.Replace("\r", "");
                                        } }
                            @(context.Body.Length > 100 ? (context.Body.Substring(0, 97) + "...") : context.Body)
                        </td>
                    </Detail>
                </Pager>
            }
            @if (notifications.Any())
            {
                <br />
                <ActionDialog Header="Clear Notifications" Message="Are You Sure You Wish To Permanently Delete All Notifications ?" Action="Delete All Notifications" Security="SecurityAccessLevel.Admin" Class="btn btn-danger" OnClick="@(async () => await DeleteAllNotifications())" ResourceKey="DeleteAllNotifications" />
            }
            <br /><hr />
            <select class="form-select" @onchange="(e => FilterChanged(e))">
                <option value="to">@Localizer["Inbox"]</option>
                <option value="from">@Localizer["Items.Sent"]</option>
            </select>
        }
    </TabPanel>
</TabStrip>
<br /><br />

@code {
	private string username = string.Empty;
	private string _password = string.Empty;
	private string _passwordtype = "password";
	private string _togglepassword = string.Empty;
	private string confirm = string.Empty;
	private bool allowtwofactor = false;
	private string twofactor = "False";
	private string email = string.Empty;
	private string displayname = string.Empty;
	private FileManager filemanager;
	private int folderid = -1;
	private int photofileid = -1;
	private File photo = null;
	private List<Profile> profiles;
	private Dictionary<string, string> settings;
	private string category = string.Empty;
	private string filter = "to";
	private List<Notification> notifications;

	public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.View;

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			_togglepassword = SharedLocalizer["ShowPassword"];

			if (PageState.Site.Settings.ContainsKey("LoginOptions:TwoFactor") && !string.IsNullOrEmpty(PageState.Site.Settings["LoginOptions:TwoFactor"]))
			{
				allowtwofactor = (PageState.Site.Settings["LoginOptions:TwoFactor"] == "true");
			}

			if (PageState.User != null)
			{
				username = PageState.User.Username;
				twofactor = PageState.User.TwoFactorRequired.ToString();
				email = PageState.User.Email;
				displayname = PageState.User.DisplayName;

				// get user folder
				var folder = await FolderService.GetFolderAsync(ModuleState.SiteId, PageState.User.FolderPath);
				if (folder != null)
				{
					folderid = folder.FolderId;
				}

				if (PageState.User.PhotoFileId != null)
				{
					photofileid = PageState.User.PhotoFileId.Value;
					photo = await FileService.GetFileAsync(photofileid);
				}
				else
				{
					photofileid = -1;
					photo = null;
				}

				profiles = await ProfileService.GetProfilesAsync(ModuleState.SiteId);
				settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);

				await LoadNotificationsAsync();
			}
			else
			{
				AddModuleMessage(Localizer["Message.User.NoLogIn"], MessageType.Warning);
			}
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Loading User Profile {Error}", ex.Message);
			AddModuleMessage(Localizer["Error.Profile.Load"], MessageType.Error);
		}
	}

	private async Task LoadNotificationsAsync()
	{
		notifications = await NotificationService.GetNotificationsAsync(PageState.Site.SiteId, filter, PageState.User.UserId);
		notifications = notifications.Where(item => item.DeletedBy != PageState.User.Username).ToList();
	}

	private string GetProfileValue(string SettingName, string DefaultValue)
	{
		string value = SettingService.GetSetting(settings, SettingName, DefaultValue);
		if (value.Contains("]"))
		{
			value = value.Substring(value.IndexOf("]") + 1);
		}
		return value;
	}

	private async Task Save()
	{
		try
		{
			if (username != string.Empty && email != string.Empty && ValidateProfiles())
			{
				if (_password == confirm)
				{
					var user = PageState.User;
					user.Username = username;
					user.Password = _password;
					user.TwoFactorRequired = bool.Parse(twofactor);
					user.Email = email;
					user.DisplayName = (displayname == string.Empty ? username : displayname);
					user.PhotoFileId = filemanager.GetFileId();
					if (user.PhotoFileId == -1)
					{
						user.PhotoFileId = null;
					}
					if (user.PhotoFileId != null)
					{
						photofileid = user.PhotoFileId.Value;
						photo = await FileService.GetFileAsync(photofileid);
					}
					else
					{
						photofileid = -1;
						photo = null;
					}

					user = await UserService.UpdateUserAsync(user);
					if (user != null)
					{
						await SettingService.UpdateUserSettingsAsync(settings, PageState.User.UserId);
						await logger.LogInformation("User Profile Saved");

						AddModuleMessage(Localizer["Success.Profile.Update"], MessageType.Success);
						StateHasChanged();
					}
					else
					{
						AddModuleMessage(Localizer["Message.Password.Complexity"], MessageType.Error);						
					}
				}
                else
                {
                    AddModuleMessage(Localizer["Message.Password.Invalid"], MessageType.Warning);
                }
            }
            else
            {
                AddModuleMessage(Localizer["Message.Required.ProfileInfo"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving User Profile {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.Profile.Save"], MessageType.Error);
        }
    }

    private bool ValidateProfiles()
    {
        bool valid = true;
        foreach (Profile profile in profiles)
        {
            if (string.IsNullOrEmpty(SettingService.GetSetting(settings, profile.Name, string.Empty)) && !string.IsNullOrEmpty(profile.DefaultValue))
            {
                settings = SettingService.SetSetting(settings, profile.Name, profile.DefaultValue);
            }
            if (!profile.IsPrivate || UserSecurity.IsAuthorized(PageState.User, RoleNames.Admin))
            {
                if (profile.IsRequired && string.IsNullOrEmpty(SettingService.GetSetting(settings, profile.Name, string.Empty)))
                {
                    valid = false;
                }
            }
        }
        return valid;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo(NavigateUrl(string.Empty));
    }

    private void ProfileChanged(ChangeEventArgs e, string SettingName)
    {
        var value = (string)e.Value;
        settings = SettingService.SetSetting(settings, SettingName, value);
    }

    private async Task Delete(Notification Notification)
    {
        try
        {
            if (!Notification.IsDeleted)
            {
                Notification.IsDeleted = true;
                await NotificationService.UpdateNotificationAsync(Notification);
            }
            else
            {
                await NotificationService.DeleteNotificationAsync(Notification.NotificationId);
            }

            await logger.LogInformation("Notification Deleted {Notification}", Notification);
            await LoadNotificationsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Notification {Notification} {Error}", Notification, ex.Message);
            AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    private async void FilterChanged(ChangeEventArgs e)
    {
        filter = (string)e.Value;

        await LoadNotificationsAsync();
        StateHasChanged();
    }

    private async Task DeleteAllNotifications()
    {
        try
        {
            ModuleInstance.ShowProgressIndicator();
            foreach(var Notification in notifications)
            {
                if (!Notification.IsDeleted)
                {
                    Notification.IsDeleted = true;
                    await NotificationService.UpdateNotificationAsync(Notification);
                }
                else
                {
                    await NotificationService.DeleteNotificationAsync(Notification.NotificationId);
                }
                await logger.LogInformation("Notification Deleted {Notification}", Notification);
            } 
            await logger.LogInformation("Notifications Permanently Deleted");
            await LoadNotificationsAsync();
            ModuleInstance.HideProgressIndicator();

            StateHasChanged();            
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Notifications {Error}", ex.Message);
            AddModuleMessage(ex.Message, MessageType.Error);
            ModuleInstance.HideProgressIndicator();
        }
    
    }

    private void TogglePassword()
	{
		if (_passwordtype == "password")
		{
			_passwordtype = "text";
			_togglepassword = SharedLocalizer["HidePassword"];
		}
		else
		{
			_passwordtype = "password";
			_togglepassword = SharedLocalizer["ShowPassword"];
		}
	}

}
