@namespace Oqtane.Modules.Admin.UserProfile
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserRoleService UserRoleService
@inject INotificationService NotificationService

@if (PageState.User != null)
{
    <table class="table table-borderless">
        <tr>
            <td>
                <Label  For="to" HelpText="Select the user it is going to">To: </Label>
            </td>
            <td>
                <select id="to" class="form-control"  @bind="@userid">
                    <option value="-1">&lt;Select User&gt;</option>
                    @if (userroles != null)
                    {
                        foreach (UserRole userrole in userroles)
                        {
                            <option value="@userrole.UserId">@userrole.User.DisplayName</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <Label For="subject" HelpText="Enter the subject of the message">Subject: </Label>
            </td>
            <td>
                <input id="subject" class="form-control" @bind="@subject" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="message" HelpText="Enter the message">Message: </Label>
            </td>
            <td>
                <textarea id="message" class="form-control" @bind="@body" rows="5" />
            </td>
        </tr>
    </table>
    <button type="button" class="btn btn-primary" @onclick="Send">Send</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
}

@code {
    private List<UserRole> userroles;
    private string userid = "-1";
    private string subject = "";
    private string body = "";

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.View;

    public override string Title => "Send Notification";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userroles = await UserRoleService.GetUserRolesAsync(PageState.Site.SiteId);
            userroles = userroles.Where(item => item.Role.Name == Constants.RegisteredRole || item.Role.Name == Constants.HostRole)
                .OrderBy(item => item.User.DisplayName).ToList();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Users {Error}", ex.Message);
            AddModuleMessage("Error Loading Users", MessageType.Error);
        }
    }

    private async Task Send()
    {
        var notification = new Notification();
        try
        {
            notification.SiteId = PageState.Site.SiteId;
            notification.FromUserId = PageState.User.UserId;
            notification.ToUserId = int.Parse(userid);
            notification.ToEmail = "";
            notification.Subject = subject;
            notification.Body = body;
            notification.ParentId = null;
            notification.CreatedOn = DateTime.UtcNow;
            notification.IsDelivered = false;
            notification.DeliveredOn = null;

            notification = await NotificationService.AddNotificationAsync(notification);

            await logger.LogInformation("Notification Created {Notification}", notification);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Notification {Notification} {Error}", notification, ex.Message);
            AddModuleMessage("Error Adding Notification", MessageType.Error);
        }
    }

}
