@namespace Oqtane.Modules.Admin.Themes
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IThemeService ThemeService
@inject IPackageService PackageService

@if (themes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Text="Install Theme" />

    <Pager Items="@themes">
        <Header>
            <th>&nbsp;</th>
            <th>Name</th>
            <th>Version</th>
            <th>&nbsp;</th>
        </Header>
        <Row>
            <td>
                @if (context.AssemblyName != "Oqtane.Client")
                {
                    <ActionDialog Header="Delete Theme" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Theme?")" Action="Delete" Security="SecurityAccessLevel.Host" Class="btn btn-danger" OnClick="@(async () => await DeleteTheme(context))" />
                }
            </td>
            <td>@context.Name</td>
            <td>@context.Version</td>
            <td>
                @if (UpgradeAvailable(context.ThemeName, context.Version))
                {
                    <button type="button" class="btn btn-success" @onclick=@(async () => await DownloadTheme(context.ThemeName, context.Version))>Upgrade</button>
                }
            </td>
        </Row>
    </Pager>
}

@code {
    private List<Theme> themes;
    private List<Package> packages;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Host;

    protected override async Task OnInitializedAsync()
    {
        themes = await ThemeService.GetThemesAsync();
        packages = await PackageService.GetPackagesAsync("module");
    }

    private bool UpgradeAvailable(string themename, string version)
    {
        var upgradeavailable = false;
        var package = packages.Where(item => item.PackageId == Utilities.GetTypeName(themename)).FirstOrDefault();
        if (package != null)
        {
            upgradeavailable = (Version.Parse(package.Version).CompareTo(Version.Parse(version)) > 0);
        }
        
        return upgradeavailable;
    }

    private async Task DownloadTheme(string themename, string version)
    {
        await PackageService.DownloadPackageAsync(themename, version, "Themes");
        await logger.LogInformation("Theme Downloaded {ThemeName} {Version}", themename, version);
        await ThemeService.InstallThemesAsync();
        NavigationManager.NavigateTo(NavigateUrl());
    }

    private async Task DeleteTheme(Theme Theme)
    {
        await ThemeService.DeleteThemeAsync(Theme.ThemeName);
        await logger.LogInformation("Theme Deleted {Theme}", Theme);
        NavigationManager.NavigateTo(NavigateUrl());
    }
}