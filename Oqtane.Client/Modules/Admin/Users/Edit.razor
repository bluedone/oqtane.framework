@namespace Oqtane.Modules.Admin.Users
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IProfileService ProfileService
@inject ISettingService SettingService
@inject IFileService FileService
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (PageState.User != null && photo != null)
{
    <img src="@photo.Url" alt="@displayname" style="max-width: 400px" class="rounded-circle mx-auto d-block">
}
else
{
    <br />
}
<TabStrip>
    <TabPanel Name="Identity" ResourceKey="Identity">
        @if (profiles != null)
        {
            <div class="container">
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="username" HelpText="The unique username for a user. Note that this field can not be modified." ResourceKey="Username"></Label>
                    <div class="col-sm-9">
                        <input id="username" class="form-control" @bind="@username" readonly />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="password" HelpText="The user's password. Please choose a password which is sufficiently secure." ResourceKey="Password"></Label>
					<div class="col-sm-9">
                        <div class="input-group">
						    <input id="password" type="@_passwordtype" class="form-control" @bind="@_password" autocomplete="new-password" />
                            <button type="button" class="btn btn-secondary" @onclick="@TogglePassword" tabindex="-1">@_togglepassword</button>
					    </div>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="confirm" HelpText="Please enter the password again to confirm it matches with the value above" ResourceKey="Confirm"></Label>
                    <div class="col-sm-9">
                        <div class="input-group">
							<input id="confirm" type="@_passwordtype" class="form-control" @bind="@confirm" autocomplete="new-password" />
                            <button type="button" class="btn btn-secondary" @onclick="@TogglePassword" tabindex="-1">@_togglepassword</button>
					    </div>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="email" HelpText="The email address where the user will receive notifications" ResourceKey="Email"></Label>
                    <div class="col-sm-9">
                        <input id="email" class="form-control" @bind="@email" />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="displayname" HelpText="The full name of the user" ResourceKey="DisplayName"></Label>
                    <div class="col-sm-9">
                        <input id="displayname" class="form-control" @bind="@displayname" />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="@photofileid.ToString()" HelpText="A photo of the user" ResourceKey="Photo"></Label>
                    <div class="col-sm-9">
                        <FileManager FileId="@photofileid" @ref="filemanager" />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="isdeleted" HelpText="Indicate if the user is active" ResourceKey="IsDeleted"></Label>
                    <div class="col-sm-9">
                        <select id="isdeleted" class="form-select" @bind="@isdeleted">
                            <option value="True">@SharedLocalizer["Yes"]</option>
                            <option value="False">@SharedLocalizer["No"]</option>
                        </select>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="lastlogin" HelpText="The date and time when the user last signed in" ResourceKey="LastLogin"></Label>
                    <div class="col-sm-9">
                        <input id="lastlogin" class="form-control" @bind="@lastlogin" readonly />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="lastipaddress" HelpText="The IP Address of the user recorded during their last login" ResourceKey="LastIPAddress"></Label>
                    <div class="col-sm-9">
                        <input id="lastipaddress" class="form-control" @bind="@lastipaddress" readonly />
                    </div>
                </div>
            </div>
        }
    </TabPanel>
    <TabPanel Name="Profile" ResourceKey="Profile">
        @if (profiles != null)
        {
            <div class="container">
                <div class="row mb-1 align-items-center">
                    @foreach (Profile profile in profiles)
                    {
                        var p = profile;
                        if (p.Category != category)
                        {
                            <div class="col text-center pb-2">
                                <strong>@p.Category</strong>
                            </div>
                            category = p.Category;
                        }
                        <div class="row mb-1 align-items-center">
                            <Label Class="col-sm-3" For="@p.Name" HelpText="@p.Description">@p.Title</Label>
                            <div class="col-sm-9">
                                @if (!string.IsNullOrEmpty(p.Options))
                                {
                                    <select id="@p.Name" class="form-select" @onchange="@(e => ProfileChanged(e, p.Name))">
                                        @foreach (var option in p.Options.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                                        {
                                            @if (GetProfileValue(p.Name, "") == option || (GetProfileValue(p.Name, "") == "" && p.DefaultValue == option))
                                            {
                                                <option value="@option" selected>@option</option>
                                            }
                                            else
                                            {
                                                <option value="@option">@option</option>
                                            }
                                        }
                                    </select>
                                }
                                else
                                {
                                    @if (p.IsRequired)
                                    {
                                        <input id="@p.Name" class="form-control" maxlength="@p.MaxLength" value="@GetProfileValue(p.Name, p.DefaultValue)" required @onchange="@(e => ProfileChanged(e, p.Name))" />
                                    }
                                    else
                                    {
                                        <input id="@p.Name" class="form-control" maxlength="@p.MaxLength" value="@GetProfileValue(p.Name, p.DefaultValue)" @onchange="@(e => ProfileChanged(e, p.Name))" />
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </TabPanel>
</TabStrip>

<button type="button" class="btn btn-success" @onclick="SaveUser">@SharedLocalizer["Save"]</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
<br />
<br />
<AuditInfo CreatedBy="@createdby" CreatedOn="@createdon" ModifiedBy="@modifiedby" ModifiedOn="@modifiedon" DeletedBy="@deletedby" DeletedOn="@deletedon"></AuditInfo>

@code {
	private int userid;
	private string username = string.Empty;
	private string _password = string.Empty;
	private string _passwordtype = "password";
	private string _togglepassword = string.Empty;
	private string confirm = string.Empty;
	private string email = string.Empty;
	private string displayname = string.Empty;
	private FileManager filemanager;
	private int photofileid = -1;
	private File photo = null;
	private string isdeleted;
	private string lastlogin;
	private string lastipaddress;

	private List<Profile> profiles;
	private Dictionary<string, string> settings;
	private string category = string.Empty;

	private string createdby;
	private DateTime createdon;
	private string modifiedby;
	private DateTime modifiedon;
	private string deletedby;
	private DateTime? deletedon;

	public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			if (PageState.QueryString.ContainsKey("id"))
			{
				_togglepassword = SharedLocalizer["ShowPassword"];
				profiles = await ProfileService.GetProfilesAsync(PageState.Site.SiteId);
				userid = Int32.Parse(PageState.QueryString["id"]);
				var user = await UserService.GetUserAsync(userid, PageState.Site.SiteId);
				if (user != null)
				{
					username = user.Username;
					email = user.Email;
					displayname = user.DisplayName;
					if (user.PhotoFileId != null)
					{
						photofileid = user.PhotoFileId.Value;
						photo = await FileService.GetFileAsync(photofileid);
					}
					else
					{
						photofileid = -1;
						photo = null;
					}
					isdeleted = user.IsDeleted.ToString();
					lastlogin = string.Format("{0:MMM dd yyyy HH:mm:ss}", user.LastLoginOn);
					lastipaddress = user.LastIPAddress;

					settings = await SettingService.GetUserSettingsAsync(user.UserId);
					createdby = user.CreatedBy;
					createdon = user.CreatedOn;
					modifiedby = user.ModifiedBy;
					modifiedon = user.ModifiedOn;
					deletedby = user.DeletedBy;
					deletedon = user.DeletedOn;
				}
			}
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Loading User {UserId} {Error}", userid, ex.Message);
			AddModuleMessage(Localizer["Error.User.Load"], MessageType.Error);
		}
	}

	private string GetProfileValue(string SettingName, string DefaultValue)
	{
		string value = SettingService.GetSetting(settings, SettingName, DefaultValue);
		if (value.Contains("]"))
		{
			value = value.Substring(value.IndexOf("]") + 1);
		}
		return value;
	}

	private async Task SaveUser()
	{
		try
		{
			if (username != string.Empty && email != string.Empty && ValidateProfiles())
			{
				if (_password == confirm)
				{
					var user = await UserService.GetUserAsync(userid, PageState.Site.SiteId);
					user.SiteId = PageState.Site.SiteId;
					user.Username = username;
					user.Password = _password;
					user.Email = email;
					user.DisplayName = string.IsNullOrWhiteSpace(displayname) ? username : displayname;
					user.PhotoFileId = null;
					user.PhotoFileId = filemanager.GetFileId();
					if (user.PhotoFileId == -1)
					{
						user.PhotoFileId = null;
					}

					user.IsDeleted = (isdeleted == null ? true : Boolean.Parse(isdeleted));

					user = await UserService.UpdateUserAsync(user);
					if (user != null)
					{
						await SettingService.UpdateUserSettingsAsync(settings, user.UserId);
						await logger.LogInformation("User Saved {User}", user);
						NavigationManager.NavigateTo(NavigateUrl());
					}
					else
					{
						AddModuleMessage(Localizer["Message.Password.Complexity"], MessageType.Error);
					}
                }
                else
                {
                    AddModuleMessage(Localizer["Message.Password.NoMatch"], MessageType.Warning);
                }
            }
            else
            {
                AddModuleMessage(Localizer["Message.Required.ProfileInfo"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving User {Username} {Email} {Error}", username, email, ex.Message);
            AddModuleMessage(Localizer["Error.User.Save"], MessageType.Error);
        }
    }

    private bool ValidateProfiles()
    {
        bool valid = true;
        foreach (Profile profile in profiles)
        {
            if (string.IsNullOrEmpty(SettingService.GetSetting(settings, profile.Name, string.Empty)) && !string.IsNullOrEmpty(profile.DefaultValue))
            {
                settings = SettingService.SetSetting(settings, profile.Name, profile.DefaultValue);
            }
            if (profile.IsRequired && string.IsNullOrEmpty(SettingService.GetSetting(settings, profile.Name, string.Empty)))
            {
                valid = false;
            }
        }
        return valid;
    }

    private void ProfileChanged(ChangeEventArgs e, string SettingName)
    {
        var value = (string)e.Value;
        settings = SettingService.SetSetting(settings, SettingName, value);
    }

    private void TogglePassword()
	{
		if (_passwordtype == "password")
		{
			_passwordtype = "text";
			_togglepassword = SharedLocalizer["HidePassword"];
		}
		else
		{
			_passwordtype = "password";
			_togglepassword = SharedLocalizer["ShowPassword"];
		}
	}
}
