@namespace Oqtane.Modules.Admin.Users
@inherits ModuleBase
@inject IUserRoleService UserRoleService
@inject IUserService UserService
@inject ISettingService SettingService
@inject ISiteService SiteService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (userroles == null)
{
    <p>
        <em>@SharedLocalizer["Loading"]</em>
    </p>
}
else
{
    <TabStrip>
        <TabPanel Name="Users" Heading="Users" ResourceKey="Users">
			<div class="container">
				<div class="row mb-1 align-items-center">
					<div class="col-sm-4">
						<ActionLink Action="Add" Text="Add User" ResourceKey="AddUser" />
					</div>
					<div class="col-sm-4">
						<input class="form-control" @bind="@_search" />
					</div>
					<div class="col-sm-4">
						<button type="button" class="btn btn-secondary" @onclick="OnSearch">@SharedLocalizer["Search"]</button>
					</div>
				</div>
			</div>
			<Pager Items="@userroles">
				<Header>
				<th style="width: 1px;">&nbsp;</th>
				<th style="width: 1px;">&nbsp;</th>
				<th style="width: 1px;">&nbsp;</th>
				<th>@SharedLocalizer["Name"]</th>
				<th>@SharedLocalizer["Username"]</th>
				</Header>
				<Row>
					<td>
						<ActionLink Action="Edit" Parameters="@($"id=" + context.UserId.ToString())" ResourceKey="EditUser" />
					</td>
					<td>
						<ActionDialog Header="Delete User" Message="@string.Format(Localizer["Confirm.User.Delete"], context.User.DisplayName)" Action="Delete" Security="SecurityAccessLevel.Admin" Class="btn btn-danger" OnClick="@(async () => await DeleteUser(context))" Disabled="@(context.UserId == PageState.User.UserId)" ResourceKey="DeleteUser" />
					</td>
					<td>
						<ActionLink Action="Roles" Parameters="@($"id=" + context.UserId.ToString())" ResourceKey="Roles" />
					</td>
					<td>@context.User.DisplayName</td>
					<td>@context.User.Username</td>
				</Row>
			</Pager>
	</TabPanel>
        <TabPanel Name="Settings" Heading="Settings" ResourceKey="Settings">
			<div class="container">
				<div class="row mb-1 align-items-center">
					<Label Class="col-sm-3" For="allowregistration" HelpText="Do You Want To Allow Visitors To Be Able To Register For A User Account On This Site?" ResourceKey="AllowRegistration">Allow User Registration?</Label>
					<div class="col-sm-9">
						<select id="allowregistration" class="form-select" @bind="@_allowregistration" required>
							<option value="True">@SharedLocalizer["Yes"]</option>
							<option value="False">@SharedLocalizer["No"]</option>
						</select>
					</div>
				</div>
				<br />
				<Section Name="Password" Heading="Password Settings" ResourceKey="PasswordSettings">
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="minimumlength" HelpText="The Minimum Length For A Password" ResourceKey="RequiredLength">Minimum Length:</Label>
						<div class="col-sm-9">
							<input id="minimumlength" class="form-control" @bind="@_minimumlength" required />
						</div>
					</div>					
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="uniquecharacters" HelpText="The Minimum Number Of Unique Characters Which A Password Must Contain" ResourceKey="UniqueCharacters">Unique Characters:</Label>
						<div class="col-sm-9">
							<input id="uniquecharacters" class="form-control" @bind="@_uniquecharacters" required />
						</div>
					</div>					
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="requiredigit" HelpText="Indicate If Passwords Must Contain A Digit" ResourceKey="RequireDigit">Require Digit?</Label>
						<div class="col-sm-9">
							<select id="requiredigit" class="form-select" @bind="@_requiredigit" required>
								<option value="true">@SharedLocalizer["Yes"]</option>
								<option value="false">@SharedLocalizer["No"]</option>
							</select>
						</div>
					</div>					
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="requireupper" HelpText="Indicate If Passwords Must Contain An Upper Case Character" ResourceKey="RequireUpper">Require Uppercase?</Label>
						<div class="col-sm-9">
							<select id="requireupper" class="form-select" @bind="@_requireupper" required>
								<option value="true">@SharedLocalizer["Yes"]</option>
								<option value="false">@SharedLocalizer["No"]</option>
							</select>
						</div>
					</div>					
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="requirelower" HelpText="Indicate If Passwords Must Contain A Lower Case Character" ResourceKey="RequireLower">Require Lowercase?</Label>
						<div class="col-sm-9">
							<select id="requirelower" class="form-select" @bind="@_requirelower" required>
								<option value="true">@SharedLocalizer["Yes"]</option>
								<option value="false">@SharedLocalizer["No"]</option>
							</select>
						</div>
					</div>
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="requirepunctuation" HelpText="Indicate if Passwords Must Contain A Non-alphanumeric Character (ie. Punctuation)" ResourceKey="RequirePunctuation">Require Punctuation?</Label>
						<div class="col-sm-9">
							<select id="requirepunctuation" class="form-select" @bind="@_requirepunctuation" required>
								<option value="true">@SharedLocalizer["Yes"]</option>
								<option value="false">@SharedLocalizer["No"]</option>
							</select>
						</div>
					</div>					
				</Section>
				<Section Name="Lockout" Heading="Lockout Settings" ResourceKey="LockoutSettings">
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="maximum" HelpText="The Maximum Number Of Sign In Attempts Before A User Is Locked Out" ResourceKey="MaximumFailures">Maximum Failures:</Label>
						<div class="col-sm-9">
							<input id="maximum" class="form-control" @bind="@_maximumfailures" required />
						</div>
					</div>					
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="lockoutduration" HelpText="The Number Of Minutes A User Should Be Locked Out" ResourceKey="LockoutDuration">Lockout Duration:</Label>
						<div class="col-sm-9">
							<input id="lockoutduration" class="form-control" @bind="@_lockoutduration" required />
						</div>
					</div>					
				</Section>
				<Section Name="ExternalLogin" Heading="External Login Settings" ResourceKey="ExternalLoginSettings">
					<div class="row mb-1 align-items-center">
						<Label Class="col-sm-3" For="providertype" HelpText="Select the external login provider type" ResourceKey="ProviderType">Provider Type:</Label>
						<div class="col-sm-9">
							<select id="providertype" class="form-select" value="@_providertype" @onchange="(e => ProviderTypeChanged(e))">
								<option value="" selected>@Localizer["Not Specified"]</option>
								<option value="@AuthenticationProviderTypes.OpenIDConnect">@Localizer["OpenID Connect"]</option>
								<option value="@AuthenticationProviderTypes.OAuth2">@Localizer["OAuth 2.0"]</option>
							</select>
						</div>
					</div>		
					@if (_providertype != "")
					{
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="providername" HelpText="The external login provider name which will be displayed on the login page" ResourceKey="ProviderName">Provider Name:</Label>
							<div class="col-sm-9">
								<input id="providername" class="form-control" @bind="@_providername" />
							</div>
						</div>
					}
					@if (_providertype == AuthenticationProviderTypes.OpenIDConnect)
					{
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="authority" HelpText="The Authority Url or Issuer Url associated with the OpenID Connect provider" ResourceKey="Authority">Authority:</Label>
							<div class="col-sm-9">
								<input id="authority" class="form-control" @bind="@_authority" />
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="metadataurl" HelpText="The discovery endpoint for obtaining metadata for this provider. Only specify if the OpenID Connect provider does not use the standard approach (ie. /.well-known/openid-configuration)" ResourceKey="MetadataUrl">Metadata Url:</Label>
							<div class="col-sm-9">
								<input id="metadataurl" class="form-control" @bind="@_metadataurl" />
							</div>
						</div>
					}
					@if (_providertype == AuthenticationProviderTypes.OAuth2)
					{
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="authorizationurl" HelpText="The endpoint for obtaining an Authorization Code" ResourceKey="AuthorizationUrl">Authorization Url:</Label>
							<div class="col-sm-9">
								<input id="authorizationurl" class="form-control" @bind="@_authorizationurl" />
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="tokenurl" HelpText="The endpoint for obtaining an Auth Token" ResourceKey="TokenUrl">Token Url:</Label>
							<div class="col-sm-9">
								<input id="tokenurl" class="form-control" @bind="@_tokenurl" />
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="userinfourl" HelpText="The endpoint for obtaining user information. This should be an API or Page Url which contains the users email address." ResourceKey="UserInfoUrl">User Info Url:</Label>
							<div class="col-sm-9">
								<input id="userinfourl" class="form-control" @bind="@_userinfourl" />
							</div>
						</div>
					}
					@if (_providertype != "")
					{
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="clientid" HelpText="The Client ID from the provider" ResourceKey="ClientID">Client ID:</Label>
							<div class="col-sm-9">
								<input id="clientid" class="form-control" @bind="@_clientid" />
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="clientsecret" HelpText="The Client Secret from the provider" ResourceKey="ClientSecret">Client Secret:</Label>
							<div class="col-sm-9">
								<input type="password" id="clientsecret" class="form-control" @bind="@_clientsecret" />
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="scopes" HelpText="A list of Scopes to request from the provider (separated by commas). If none are specified, standard Scopes will be used by default." ResourceKey="Scopes">Scopes:</Label>
							<div class="col-sm-9">
								<input id="scopes" class="form-control" @bind="@_scopes" />
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="pkce" HelpText="Indicate if the provider supports Proof Key for Code Exchange (PKCE)" ResourceKey="PKCE">Use PKCE?</Label>
							<div class="col-sm-9">
								<select id="pkce" class="form-select" @bind="@_pkce" required>
									<option value="true">@SharedLocalizer["Yes"]</option>
									<option value="false">@SharedLocalizer["No"]</option>
								</select>
							</div>
						</div>					
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="redirecturl" HelpText="The Redirect Url (or Callback Url) which usually needs to be registered with the provider" ResourceKey="RedirectUrl">Redirect Url:</Label>
							<div class="col-sm-9">
								<input id="redirecturl" class="form-control" @bind="@_redirecturl" readonly />
							</div>
						</div>
						@if (_providertype == AuthenticationProviderTypes.OpenIDConnect)
						{
							<div class="row mb-1 align-items-center">
								<Label Class="col-sm-3" For="emailclaimtype" HelpText="The type name for the email address claim provided by the provider" ResourceKey="EmailClaimType">Email Claim Type:</Label>
								<div class="col-sm-9">
									<input id="emailclaimtype" class="form-control" @bind="@_emailclaimtype" />
								</div>
							</div>
						}
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="domainfilter" HelpText="Provide any email domain filter criteria (separated by commas). Domains to exclude should be prefixed with an exclamation point (!). For example 'microsoft.com,!hotmail.com' would include microsoft.com email addresses but not hotmail.com email addresses." ResourceKey="DomainFilter">Domain Filter:</Label>
							<div class="col-sm-9">
								<input id="domainfilter" class="form-control" @bind="@_domainfilter" />
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="createusers" HelpText="Do you want new users to be created automatically? If you disable this option, users must already be registered on the site in order to sign in with their external login." ResourceKey="CreateUsers">Create New Users?</Label>
							<div class="col-sm-9">
								<select id="createusers" class="form-select" @bind="@_createusers">
									<option value="true">@SharedLocalizer["Yes"]</option>
									<option value="false">@SharedLocalizer["No"]</option>
								</select>
							</div>
						</div>
						<div class="row mb-1 align-items-center">
							<Label Class="col-sm-3" For="allowsitelogin" HelpText="Do you want to allow users to sign in using a username and password that is managed locally on this site? Note that you should only disable this option if you have already sucessfully configured an external login provider, or else you may lock yourself out of the site." ResourceKey="AllowSiteLogin">Allow Site Login?</Label>
							<div class="col-sm-9">
								<select id="allowsitelogin" class="form-select" @bind="@_allowsitelogin">
									<option value="true">@SharedLocalizer["Yes"]</option>
									<option value="false">@SharedLocalizer["No"]</option>
								</select>
							</div>
						</div>
					}
				</Section>
			</div>
			<br />
			<button type="button" class="btn btn-success" @onclick="SaveSiteSettings">@SharedLocalizer["Save"]</button>
		</TabPanel>
	</TabStrip>
}

@code {
	private List<UserRole> allroles;
	private List<UserRole> userroles;
	private string _search;

	private string _allowregistration;
	private string _minimumlength;
	private string _uniquecharacters;
	private string _requiredigit;
	private string _requireupper;
	private string _requirelower;
	private string _requirepunctuation;
	private string _maximumfailures;
	private string _lockoutduration;

	private string _providertype;
	private string _providername;
	private string _authority;
	private string _metadataurl;
	private string _authorizationurl;
	private string _tokenurl;
	private string _userinfourl;
	private string _clientid;
	private string _clientsecret;
	private string _scopes;
	private string _pkce;
	private string _redirecturl;
	private string _emailclaimtype;
	private string _domainfilter;
	private string _createusers;
	private string _allowsitelogin;

	public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

	protected override async Task OnInitializedAsync()
	{
		allroles = await UserRoleService.GetUserRolesAsync(PageState.Site.SiteId);
		await LoadSettingsAsync();
		userroles = Search(_search);

		_allowregistration = PageState.Site.AllowRegistration.ToString();
		var settings = await SettingService.GetSiteSettingsAsync(PageState.Site.SiteId);

		_minimumlength = SettingService.GetSetting(settings, "IdentityOptions:Password:RequiredLength", "6");
		_uniquecharacters = SettingService.GetSetting(settings, "IdentityOptions:Password:RequiredUniqueChars", "1");
		_requiredigit = SettingService.GetSetting(settings, "IdentityOptions:Password:RequireDigit", "true");
		_requireupper = SettingService.GetSetting(settings, "IdentityOptions:Password:RequireUppercase", "true");
		_requirelower = SettingService.GetSetting(settings, "IdentityOptions:Password:RequireLowercase", "true");
		_requirepunctuation = SettingService.GetSetting(settings, "IdentityOptions:Password:RequireNonAlphanumeric", "true");
		_maximumfailures = SettingService.GetSetting(settings, "IdentityOptions:Lockout:MaxFailedAccessAttempts", "5");
		_lockoutduration = TimeSpan.Parse(SettingService.GetSetting(settings, "IdentityOptions:Lockout:DefaultLockoutTimeSpan", "00:05:00")).TotalMinutes.ToString();

		_providertype = SettingService.GetSetting(settings, "ExternalLogin:ProviderType", "");
		_providername = SettingService.GetSetting(settings, "ExternalLogin:ProviderName", "");
		_authority = SettingService.GetSetting(settings, "ExternalLogin:Authority", "");
		_metadataurl = SettingService.GetSetting(settings, "ExternalLogin:MetadataUrl", "");
		_authorizationurl = SettingService.GetSetting(settings, "ExternalLogin:AuthorizationUrl", "");
		_tokenurl = SettingService.GetSetting(settings, "ExternalLogin:TokenUrl", "");
		_userinfourl = SettingService.GetSetting(settings, "ExternalLogin:UserInfoUrl", "");
		_clientid = SettingService.GetSetting(settings, "ExternalLogin:ClientId", "");
		_clientsecret = SettingService.GetSetting(settings, "ExternalLogin:ClientSecret", "");
		_scopes = SettingService.GetSetting(settings, "ExternalLogin:Scopes", "");
		_pkce = SettingService.GetSetting(settings, "ExternalLogin:PKCE", "false");
		_redirecturl = PageState.Uri.Scheme + "://" + PageState.Alias.Name + "/signin-" + _providertype;
		_emailclaimtype = SettingService.GetSetting(settings, "ExternalLogin:EmailClaimType", "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");
		_domainfilter = SettingService.GetSetting(settings, "ExternalLogin:DomainFilter", "");
		_createusers = SettingService.GetSetting(settings, "ExternalLogin:CreateUsers", "true");
		_allowsitelogin = SettingService.GetSetting(settings, "ExternalLogin:AllowSiteLogin", "true");
	}

	private List<UserRole> Search(string search)
	{
		var results = allroles.Where(item => item.Role.Name == RoleNames.Registered || (item.Role.Name == RoleNames.Host && UserSecurity.IsAuthorized(PageState.User, RoleNames.Host)));

		if (!string.IsNullOrEmpty(_search))
		{
			results = results.Where(item =>
				(
					item.User.Username.Contains(search, StringComparison.OrdinalIgnoreCase) ||
					item.User.Email.Contains(search, StringComparison.OrdinalIgnoreCase) ||
					item.User.DisplayName.Contains(search, StringComparison.OrdinalIgnoreCase)
				)
			);
		}
		return results.ToList();
	}

	private async Task OnSearch()
	{
		userroles = Search(_search);
		await UpdateSettingsAsync();
	}

	private async Task DeleteUser(UserRole UserRole)
	{
		try
		{
			var user = await UserService.GetUserAsync(UserRole.UserId, PageState.Site.SiteId);
			if (user != null)
			{
				await UserService.DeleteUserAsync(user.UserId, PageState.Site.SiteId);
				await logger.LogInformation("User Deleted {User}", UserRole.User);
				allroles = await UserRoleService.GetUserRolesAsync(PageState.Site.SiteId);
				userroles = Search(_search);
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Deleting User {User} {Error}", UserRole.User, ex.Message);
			AddModuleMessage(ex.Message, MessageType.Error);
		}
	}

	private string settingSearch = "AU-search";

	private async Task LoadSettingsAsync()
	{
		Dictionary<string, string> settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);
		_search = SettingService.GetSetting(settings, settingSearch, "");
	}

	private async Task UpdateSettingsAsync()
	{
		Dictionary<string, string> settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);
		SettingService.SetSetting(settings, settingSearch, _search);
		await SettingService.UpdateUserSettingsAsync(settings, PageState.User.UserId);
	}

	private async Task SaveSiteSettings()
	{
		try
		{
			var site = PageState.Site;
			site.AllowRegistration = bool.Parse(_allowregistration);
			await SiteService.UpdateSiteAsync(site);

			var settings = await SettingService.GetSiteSettingsAsync(site.SiteId);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Password:RequiredLength", _minimumlength, true);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Password:RequiredUniqueChars", _uniquecharacters, true);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Password:RequireDigit", _requiredigit, true);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Password:RequireUppercase", _requireupper, true);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Password:RequireLowercase", _requirelower, true);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Password:RequireNonAlphanumeric", _requirepunctuation, true);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Lockout:MaxFailedAccessAttempts", _maximumfailures, true);
			settings = SettingService.SetSetting(settings, "IdentityOptions:Lockout:DefaultLockoutTimeSpan", TimeSpan.FromMinutes(Convert.ToInt64(_lockoutduration)).ToString(), true);

			settings = SettingService.SetSetting(settings, "ExternalLogin:ProviderType", _providertype, false);
			settings = SettingService.SetSetting(settings, "ExternalLogin:ProviderName", _providername, false);
			settings = SettingService.SetSetting(settings, "ExternalLogin:Authority", _authority, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:MetadataUrl", _metadataurl, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:AuthorizationUrl", _authorizationurl, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:TokenUrl", _tokenurl, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:UserInfoUrl", _userinfourl, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:ClientId", _clientid, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:ClientSecret", _clientsecret, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:Scopes", _scopes, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:PKCE", _pkce, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:EmailClaimType", _emailclaimtype, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:DomainFilter", _domainfilter, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:CreateUsers", _createusers, true);
			settings = SettingService.SetSetting(settings, "ExternalLogin:AllowSiteLogin", _allowsitelogin, false);

			await SettingService.UpdateSiteSettingsAsync(settings, site.SiteId);
			await SettingService.ClearSiteSettingsCacheAsync(site.SiteId);

			AddModuleMessage(Localizer["Success.SaveSiteSettings"], MessageType.Success);				
		}
		catch (Exception ex)
		{
			await logger.LogError(ex, "Error Saving Site Settings {Error}", ex.Message);
			AddModuleMessage(Localizer["Error.SaveSiteSettings"], MessageType.Error);
		}
	}

	private void ProviderTypeChanged(ChangeEventArgs e)
	{
		_providertype = (string)e.Value;
		if (_providertype == AuthenticationProviderTypes.OpenIDConnect)
		{
			_scopes = "openid,profile,email";
		}
		else
		{
			_scopes = "";
		}
		_redirecturl = PageState.Uri.Scheme + "://" + PageState.Alias.Name + "/signin-" + _providertype;
		StateHasChanged();
	}
}
