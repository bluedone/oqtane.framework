@namespace Oqtane.Modules.Admin.Users
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IProfileService ProfileService
@inject ISettingService SettingService

@if (!string.IsNullOrWhiteSpace(username))
{
    <table class="table table-borderless">
        <tr>
            <td>
                <label for="Name" class="control-label">Username: </label>
            </td>
            <td>
                <input class="form-control" @bind="@username" disabled />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Email: </label>
            </td>
            <td>
                <input class="form-control" @bind="@email" disabled />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Full Name: </label>
            </td>
            <td>
                <input class="form-control" @bind="@displayname" disabled />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Is Deleted? </label>
            </td>
            <td>
                <select class="form-control" @bind="@isdeleted" disabled>
                    <option value="True">Yes</option>
                    <option value="False">No</option>
                </select>
            </td>
        </tr>
    </table>
    <button type="button" class="btn btn-primary" @onclick="DeleteUser">Delete</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
    <br />
    <br />
    <AuditInfo CreatedBy="@createdby" CreatedOn="@createdon" ModifiedBy="@modifiedby" ModifiedOn="@modifiedon" DeletedBy="@deletedby" DeletedOn="@deletedon"></AuditInfo>
}

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Admin; } }

    int userid;
    string username = "";
    string email = "";
    string displayname = "";
    string category = "";
    string createdby;
    DateTime createdon;
    string modifiedby;
    DateTime modifiedon;
    string deletedby;
    DateTime? deletedon;
    string isdeleted;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userid = Int32.Parse(PageState.QueryString["id"]);
            User user = await UserService.GetUserAsync(userid, PageState.Site.SiteId);
            if (user != null)
            {
                username = user.Username;
                email = user.Email;
                displayname = user.DisplayName;
                createdby = user.CreatedBy;
                createdon = user.CreatedOn;
                modifiedby = user.ModifiedBy;
                modifiedon = user.ModifiedOn;
                deletedby = user.DeletedBy;
                deletedon = user.DeletedOn;
                isdeleted = user.IsDeleted.ToString();
            }
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    private async Task DeleteUser()
    {
        try
        {
            User user = await UserService.GetUserAsync(userid, PageState.Site.SiteId);
            if (user != null)
            {
                await UserService.DeleteUserAsync(userid);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

}
