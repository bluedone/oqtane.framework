@namespace Oqtane.Modules.Admin.Sites
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject ITenantService TenantService
@inject IAliasService AliasService
@inject ISiteService SiteService
@inject IThemeService  ThemeService

@if (tenants == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-borderless">
        <tr>
            <td>
                <label for="Name" class="control-label">Tenant: </label>
            </td>
            <td>
                <select class="form-control" @bind="@tenantid">
                    <option value="-1">&lt;Select Tenant&gt;</option>
                    @foreach (Tenant tenant in tenants)
                    {
                        <option value="@tenant.TenantId">@tenant.Name</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Name: </label>
            </td>
            <td>
                <input class="form-control" @bind="@name" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Aliases: </label>
            </td>
            <td>
                <textarea class="form-control" @bind="@urls" rows="3" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Logo: </label>
            </td>
            <td>
                <input class="form-control" @bind="@logo" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Default Theme: </label>
            </td>
            <td>
                <select class="form-control" @bind="@themetype">
                    <option value="">&lt;Select Theme&gt;</option>
                    @foreach (KeyValuePair<string, string> item in themes)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Default Layout: </label>
            </td>
            <td>
                <select class="form-control" @bind="@layouttype">
                    <option value="">&lt;Select Layout&gt;</option>
                    @foreach (KeyValuePair<string, string> panelayout in panelayouts)
                    {
                        <option value="@panelayout.Key">@panelayout.Value</option>
                    }
                </select>
            </td>
        </tr>
    </table>
    <button type="button" class="btn btn-success" @onclick="SaveSite">Save</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
}

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Host; } }

    Dictionary<string, string> themes = new Dictionary<string, string>();
    Dictionary<string, string> panelayouts = new Dictionary<string, string>();

    List<Tenant> tenants;
    string tenantid = "-1";
    string name = "";
    string urls = "";
    string logo = "";
    string themetype;
    string layouttype;

    protected override async Task OnInitializedAsync()
    {
        tenants = await TenantService.GetTenantsAsync();
        urls = PageState.Alias.Name;
        themes = ThemeService.GetThemeTypes(PageState.Themes);
        panelayouts = ThemeService.GetPaneLayoutTypes(PageState.Themes);
    }

    private async Task SaveSite()
    {
        Site site = new Site();
        site.Name = name;
        site.Logo = (logo == null ? "" : logo);
        site.DefaultThemeType = themetype;
        site.DefaultLayoutType = (layouttype == null ? "" : layouttype);
        site = await SiteService.AddSiteAsync(site);

        urls = urls.Replace("\n", ",");
        foreach(string name in urls.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
        {
            Alias alias = new Alias();
            alias.Name = name;
            alias.TenantId = int.Parse(tenantid);
            alias.SiteId = site.SiteId;
            await AliasService.AddAliasAsync(alias);
        }

        NavigationManager.NavigateTo("http://" + urls[0], true);
    }
}
