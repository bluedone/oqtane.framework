@using Microsoft.AspNetCore.Components.Routing
@using Oqtane.Modules
@using Microsoft.JSInterop
@using Oqtane.Models
@using Oqtane.Services
@using Oqtane.Providers
@using Oqtane.Shared
@inherits ModuleBase
@inject IUriHelper UriHelper
@inject IJSRuntime jsRuntime
@inject IUserService UserService
@inject IServiceProvider ServiceProvider

<AuthorizeView>
    <Authorizing>
        <text>...</text>
    </Authorizing>
    <Authorized>
        You are already logged in
    </Authorized>
    <NotAuthorized>
        <div class="container">
            @((MarkupString)Message)
            <div class="form-group">
                <label for="Username" class="control-label">Username: </label>
                <input type="text" name="Username" class="form-control" placeholder="Username" @bind="@Username" />
            </div>
            <div class="form-group">
                <label for="Password" class="control-label">Password: </label>
                <input type="password" name="Password" class="form-control" placeholder="Password" @bind="@Password" />
            </div>
            <div class="form-group">
                <div class="form-check form-check-inline">
                    <label class="form-check-label" for="Remember">Remember Me?</label>&nbsp;
                    <input type="checkbox" class="form-check-input" name="Remember" @bind="@Remember" />
                </div>
            </div>
            <button type="button" class="btn btn-primary" @onclick="@Login">Login</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
public override SecurityAccessLevelEnum SecurityAccessLevel { get { return SecurityAccessLevelEnum.Anonymous; } }

public string Message { get; set; } = "";
public string Username { get; set; } = "";
public string Password { get; set; } = "";
public bool Remember { get; set; } = false;

private async Task Login()
{
    User user = new User();
    user.Username = Username;
    user.Password = Password;
    user.IsPersistent = Remember;
    user = await UserService.LoginUserAsync(user);
    if (user.IsAuthenticated)
    {
        string ReturnUrl = PageState.QueryString["returnurl"];

        var authstateprovider = (IdentityAuthenticationStateProvider)ServiceProvider.GetService(typeof(IdentityAuthenticationStateProvider));
        if (authstateprovider == null)
        {
            // server-side Blazor
            var interop = new Interop(jsRuntime);
            string antiforgerytoken = await interop.GetElementByName("__RequestVerificationToken");
            var fields = new { __RequestVerificationToken = antiforgerytoken, username = Username, password = Password, remember = Remember, returnurl = ReturnUrl };
            await interop.SubmitForm("/login/", fields);
        }
        else
        {
            // client-side Blazor
            authstateprovider.NotifyAuthenticationChanged();
            PageState.Reload = Constants.ReloadPage;
            UriHelper.NavigateTo(NavigateUrl(ReturnUrl));
        }
    }
    else
    {
        Message = "<div class=\"alert alert-danger\" role=\"alert\">Login Failed. Please Remember That Passwords Are Case Sensitive.</div>";
    }
}

private void Cancel()
{
    string ReturnUrl = PageState.QueryString["returnurl"];
    UriHelper.NavigateTo(ReturnUrl);
}
}
