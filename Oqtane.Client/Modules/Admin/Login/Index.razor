@namespace Oqtane.Modules.Admin.Login
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject IUserService UserService
@inject IServiceProvider ServiceProvider

@if (Message != "")
{
    <ModuleMessage Message="@Message" Type="@Type" />
}
<AuthorizeView>
    <Authorizing>
        <text>...</text>
    </Authorizing>
    <Authorized>
        You are already logged in
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <div class="form-group">
                <label for="Username" class="control-label">Username: </label>
                <input type="text" name="Username" class="form-control" placeholder="Username" @bind="@Username" />
            </div>
            <div class="form-group">
                <label for="Password" class="control-label">Password: </label>
                <input type="password" name="Password" class="form-control" placeholder="Password" @bind="@Password" />
            </div>
            <div class="form-group">
                <div class="form-check form-check-inline">
                    <label class="form-check-label" for="Remember">Remember Me?</label>&nbsp;
                    <input type="checkbox" class="form-check-input" name="Remember" @bind="@Remember" />
                </div>
            </div>
            <button type="button" class="btn btn-primary" @onclick="Login">Login</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            <br /><br />
            <button type="button" class="btn btn-secondary" @onclick="Forgot">Forgot Password</button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Anonymous; } }

    string ReturnUrl = "";
    public string Message = "";
    public MessageType Type = MessageType.Info;
    public string Username = "";
    public string Password = "";
    public bool Remember = false;

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("returnurl"))
        {
            ReturnUrl = PageState.QueryString["returnurl"];
        }
        if (PageState.QueryString.ContainsKey("name"))
        {
            Username = PageState.QueryString["name"];
        }
        if (PageState.QueryString.ContainsKey("token"))
        {
            User user = new User();
            user.SiteId = PageState.Site.SiteId;
            user.Username = Username;
            user = await UserService.VerifyEmailAsync(user, PageState.QueryString["token"]);

            if (user != null)
            {
                Message = "User Account Verified Successfully. You Can Now Login With Your Username And Password Below.";
            }
            else
            {
                Message = "User Account Could Not Be Verified. Please Contact Your Administrator For Further Instructions.";
                Type = MessageType.Warning;
            }
        }
    }

    private async Task Login()
    {
        var authstateprovider = (IdentityAuthenticationStateProvider)ServiceProvider.GetService(typeof(IdentityAuthenticationStateProvider));
        if (authstateprovider == null)
        {
            // server-side Blazor
            User user = new User();
            user.SiteId = PageState.Site.SiteId;
            user.Username = Username;
            user.Password = Password;
            user = await UserService.LoginUserAsync(user, false, false);
            if (user.IsAuthenticated)
            {
                await logger.LogInformation("Login Successful For Username {Username}", Username);
                // complete the login on the server so that the cookies are set correctly on SignalR
                var interop = new Interop(jsRuntime);
                string antiforgerytoken = await interop.GetElementByName("__RequestVerificationToken");
                var fields = new { __RequestVerificationToken = antiforgerytoken, username = Username, password = Password, remember = Remember, returnurl = ReturnUrl };
                await interop.SubmitForm("/pages/login/", fields);
            }
            else
            {
                await logger.LogInformation("Login Failed For Username {Username}", Username);
                AddModuleMessage("Login Failed. Please Remember That Passwords Are Case Sensitive And User Accounts Require Email Verification When They Initially Created.", MessageType.Error);
            }
        }
        else
        {
            // client-side Blazor
            User user = new User();
            user.SiteId = PageState.Site.SiteId;
            user.Username = Username;
            user.Password = Password;
            user = await UserService.LoginUserAsync(user, true, Remember);
            if (user.IsAuthenticated)
            {
                await logger.LogInformation("Login Successful For Username {Username}", Username);
                authstateprovider.NotifyAuthenticationChanged();
                NavigationManager.NavigateTo(NavigateUrl(ReturnUrl, Reload.Site));
            }
            else
            {
                await logger.LogInformation("Login Failed For Username {Username}", Username);
                AddModuleMessage("Login Failed. Please Remember That Passwords Are Case Sensitive And User Accounts Require Verification When They Are Initially Created So You May Wish To Check Your Email.", MessageType.Error);
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo(ReturnUrl);
    }

    private async Task Forgot()
    {
        if (Username != "")
        {
            User user = await UserService.GetUserAsync(Username, PageState.Site.SiteId);
            if (user != null)
            {
                await UserService.ForgotPasswordAsync(user);
                Message = "Please Check The Email Address Associated To Your User Account For A Password Reset Notification";
            }
            else
            {
                Message = "User Does Not Exist";
                Type = MessageType.Warning;
            }
        }
        else
        {
            Message = "Please Enter The Username Related To Your Account And Then Select The Forgot Password Option Again";
        }
        StateHasChanged();
    }
    }
