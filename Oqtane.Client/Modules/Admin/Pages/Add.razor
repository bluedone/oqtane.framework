@namespace Oqtane.Modules.Admin.Pages
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IPageService PageService
@inject IThemeService  ThemeService

@if (_themeList != null)
{
    <table class="table table-borderless">
        <tr>
            <td>
                <Label For="Name" HelpText="Enter the page name">Name: </Label>
            </td>
            <td>
                <input id="Name" class="form-control" @bind="@_name" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Title" HelpText="Enter the page title">Title: </Label>
            </td>
            <td>
                <input id="Title" class="form-control" @bind="@_title" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Path" HelpText="Enter the path for the page">Path: </Label>
            </td>
            <td>
                <input id="Path" class="form-control" @bind="@_path" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Parent" HelpText="Select the parent for the page">Parent: </Label>
            </td>
            <td>
                <select id="Parent" class="form-control" @onchange="(e => ParentChanged(e))">
                    <option value="-1">&lt;Site Root&gt;</option>
                    @foreach (Page page in _pageList)
                    {
                        <option value="@(page.PageId)">@(new string('-', page.Level * 2))@(page.Name)</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Insert" HelpText="Select the insert for the page">Insert: </Label>
            </td>
            <td>
                <select id="Insert" class="form-control" @bind="@_insert">
                    <option value="<<">At Beginning</option>
                    @if (_children != null && _children.Count > 0)
                    {
                        <option value="<">Before</option>
                        <option value=">">After</option>
                    }
                    <option value=">>">At End</option>
                </select>
                @if (_children != null && _children.Count > 0 && (_insert == "<" || _insert == ">"))
                {
                    <select id="Insert" class="form-control" @bind="@_childid">
                        <option value="-1">&lt;Select Page&gt;</option>
                        @foreach (Page page in _children)
                        {
                            <option value="@(page.PageId)">@(page.Name)</option>
                        }
                    </select>
                }
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Navigation" HelpText="Select whether the page has navigation bar">Navigation? </Label>
            </td>
            <td>
                <select id="Navigation" class="form-control" @bind="@_isnavigation">
                    <option value="True">Yes</option>
                    <option value="False">No</option>
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Url" HelpText="Enter the url for the page">Url: </Label>
            </td>
            <td>
                <input id="Url" class="form-control" @bind="@_url" />
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Personalizable" HelpText="Do you want the page to be personalized by users">Personalizable? </Label>
            </td>
            <td>
                <select id="Personalizable" class="form-control" @bind="@_ispersonalizable">
                    <option value="True">Yes</option>
                    <option value="False">No</option>
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Default-Mode" HelpText="Select the default mode you want for the page">Default Mode? </Label>
            </td>
            <td>
                <select id="Default-Mode" class="form-control" @bind="@_mode">
                    <option value="view">View Mode</option>
                    <option value="edit">Edit Mode</option>
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Theme" HelpText="Select the theme you want for the page">Theme: </Label>
            </td>
            <td>
                <select id="Theme" class="form-control" @onchange="(e => ThemeChanged(e))">
                    <option value="">&lt;Select Theme&gt;</option>
                    @foreach (KeyValuePair<string, string> item in _themes)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Layout" HelpText="Select the layout for the page">Layout: </Label>
            </td>
            <td>
                <select id="Layout" class="form-control" @bind="@_layouttype">
                    <option value="">&lt;Select Layout&gt;</option>
                    @foreach (KeyValuePair<string, string> panelayout in _panelayouts)
                    {
                        <option value="@panelayout.Key">@panelayout.Value</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <Label For="Icon" HelpText="Enter the icon for the page">Icon: </Label>
            </td>
            <td>
                <input id="Icon" class="form-control" @bind="@_icon" />
            </td>
        </tr>
        <tr>
            <td colspan="2" align="center">
                <Label For="Permissions" HelpText="Select the permissions you want for the page">Permissions: </Label>
                <PermissionGrid EntityName="@EntityNames.Page" Permissions="@_permissions" @ref="_permissionGrid" />
            </td>
        </tr>
    </table>
    <button type="button" class="btn btn-success" @onclick="SavePage">Save</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
}

@code {
    private Dictionary<string, string> _themes = new Dictionary<string, string>();
    private Dictionary<string, string> _panelayouts = new Dictionary<string, string>();
    private List<Theme> _themeList;
    private List<Page> _pageList;
    private string _name;
    private string _title;
    private string _path = string.Empty;
    private string _parentid;
    private string _insert = ">>";
    private List<Page> _children;
    private int _childid = -1;
    private string _isnavigation = "True";
    private string _url;
    private string _ispersonalizable = "False";
    private string _mode = "view";
    private string _themetype = string.Empty;
    private string _layouttype = string.Empty;
    private string _icon = string.Empty;
    private string _permissions = string.Empty;
    private PermissionGrid _permissionGrid;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _themeList = await ThemeService.GetThemesAsync();
            _pageList = PageState.Pages;
            _children = PageState.Pages.Where(item => item.ParentId == null).ToList();

            _themes = ThemeService.GetThemeTypes(_themeList);
            _themetype = PageState.Site.DefaultThemeType;

            _panelayouts = ThemeService.GetPaneLayoutTypes(_themeList, _themetype);
            _layouttype = PageState.Site.DefaultLayoutType;

            _permissions = string.Empty;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Initializing Page {Error}", ex.Message);
            AddModuleMessage("Error Initializing Page", MessageType.Error);
        }
    }

    private async void ParentChanged(ChangeEventArgs e)
    {
        try
        {
            _parentid = (string)e.Value;
            if (_parentid == "-1")
            {
                _children = PageState.Pages.Where(item => item.ParentId == null).ToList();
            }
            else
            {
                _children = PageState.Pages.Where(item => item.ParentId == int.Parse(_parentid)).ToList();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Child Pages For Parent {PageId} {Error}", _parentid, ex.Message);
            AddModuleMessage("Error Loading Child Pages For Parent", MessageType.Error);
        }
    }

    private async void ThemeChanged(ChangeEventArgs e)
    {
        try
        {
            _themetype = (string)e.Value;
            if (_themetype != string.Empty)
            {
                _panelayouts = ThemeService.GetPaneLayoutTypes(_themeList, _themetype);
            }
            else
            {
                _panelayouts = new Dictionary<string, string>();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Pane Layouts For Theme {ThemeType} {Error}", _themetype, ex.Message);
            AddModuleMessage("Error Loading Pane Layouts For Theme", MessageType.Error);
        }
    }

    private async Task SavePage()
    {
        Page page = null;
        try
        {
            if (_name != string.Empty && !string.IsNullOrEmpty(_themetype) && (_panelayouts.Count == 0 || !string.IsNullOrEmpty(_layouttype)))
            {
                page = new Page();
                page.SiteId = PageState.Page.SiteId;
                page.Name = _name;
                page.Title = _title;
                if (_path == "")
                {
                    _path = _name;
                }

                if (_path.Contains("/"))
                {
                    _path = _path.Substring(_path.LastIndexOf("/") + 1);
                }

                if (string.IsNullOrEmpty(_parentid))
                {
                    page.ParentId = null;
                    page.Path = Utilities.GetFriendlyUrl(_path);
                }
                else
                {
                    page.ParentId = Int32.Parse(_parentid);
                    var parent = PageState.Pages.Where(item => item.PageId == page.ParentId).FirstOrDefault();
                    if (parent.Path == string.Empty)
                    {
                        page.Path = Utilities.GetFriendlyUrl(parent.Name) + "/" + Utilities.GetFriendlyUrl(_path);
                    }
                    else
                    {
                        page.Path = parent.Path + "/" + Utilities.GetFriendlyUrl(_path);
                    }
                }

                Page child;
                switch (_insert)
                {
                    case "<<":
                        page.Order = 0;
                        break;
                    case "<":
                        child = PageState.Pages.Where(item => item.PageId == _childid).FirstOrDefault();
                        page.Order = child.Order - 1;
                        break;
                    case ">":
                        child = PageState.Pages.Where(item => item.PageId == _childid).FirstOrDefault();
                        page.Order = child.Order + 1;
                        break;
                    case ">>":
                        page.Order = int.MaxValue;
                        break;
                }

                page.IsNavigation = (_isnavigation == null ? true : Boolean.Parse(_isnavigation));
                page.Url = _url;
                page.EditMode = (_mode == "edit" ? true : false);
                page.ThemeType = _themetype;
                page.LayoutType = (_layouttype == null ? string.Empty : _layouttype);
                page.Icon = (_icon == null ? string.Empty : _icon);
                page.Permissions = _permissionGrid.GetPermissions();

                if (page.ThemeType == PageState.Site.DefaultThemeType)
                {
                    page.ThemeType = string.Empty;
                }

                if (page.LayoutType == PageState.Site.DefaultLayoutType)
                {
                    page.LayoutType = string.Empty;
                }

                page.IsPersonalizable = (_ispersonalizable == null ? false : Boolean.Parse(_ispersonalizable));
                page.UserId = null;

                page = await PageService.AddPageAsync(page);
                await PageService.UpdatePageOrderAsync(page.SiteId, page.PageId, page.ParentId);

                await logger.LogInformation("Page Added {Page}", page);
                NavigationManager.NavigateTo(NavigateUrl(page.Path));
            }
            else
            {
                AddModuleMessage("You Must Provide Page Name And Theme", MessageType.Warning);
            }

        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Page {Page} {Error}", page, ex.Message);
            AddModuleMessage("Error Saving Page", MessageType.Error);
        }
    }

}
