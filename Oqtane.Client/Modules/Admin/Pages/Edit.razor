@namespace Oqtane.Modules.Admin.Pages
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IPageService PageService
@inject IThemeService  ThemeService

@if (_themeList != null)
{
    <table class="table table-borderless">
        <tr>
            <td>
                <label for="Name" class="control-label">Name: </label>
            </td>
            <td>
                <input class="form-control" @bind="@_name" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label">Title: </label>
            </td>
            <td>
                <input class="form-control" @bind="@_title" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Path: </label>
            </td>
            <td>
                <input class="form-control" @bind="@_path" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Parent: </label>
            </td>
            <td>
                <select class="form-control" @onchange="(e => ParentChanged(e))">
                    <option value="-1">&lt;Site Root&gt;</option>
                    @foreach (Page page in _pageList)
                    {
                        if (page.PageId.ToString() == _parentid)
                        {
                            <option value="@(page.PageId)" selected>@(new string('-', page.Level * 2))@(page.Name)</option>
                        }
                        else
                        {
                            <option value="@(page.PageId)">@(new string('-', page.Level * 2))@(page.Name)</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Move: </label>
            </td>
            <td>
                <select class="form-control" @bind="@_insert">
                    @if (_parentid == _currentparentid)
                    {
                        <option value="=">&lt;Maintain Current Location&gt;</option>
                    }
                    <option value="<<">To Beginning</option>
                    @if (_children != null && _children.Count > 0)
                    {
                        <option value="<">Before</option>
                        <option value=">">After</option>
                    }
                    <option value=">>">To End</option>
                </select>
                @if (_children != null && _children.Count > 0 && (_insert == "<" || _insert == ">"))
                {
                    <select class="form-control" @bind="@_childid">
                        <option value="-1">&lt;Select Page&gt;</option>
                        @foreach (Page page in _children)
                        {
                            <option value="@(page.PageId)">@(page.Name)</option>
                        }
                    </select>
                }
            </td>
        </tr>
        <tr>
            <td>
                <label for="Url" class="control-label">Url: </label>
            </td>
            <td>
                <input class="form-control" @bind="@_url" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Navigation? </label>
            </td>
            <td>
                <select class="form-control" @bind="@_isnavigation">
                    <option value="True">Yes</option>
                    <option value="False">No</option>
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Personalizable? </label>
            </td>
            <td>
                <select class="form-control" @bind="@_ispersonalizable">
                    <option value="True">Yes</option>
                    <option value="False">No</option>
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Default Mode? </label>
            </td>
            <td>
                <select class="form-control" @bind="@_mode">
                    <option value="view">View Mode</option>
                    <option value="edit">Edit Mode</option>
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Theme: </label>
            </td>
            <td>
                <select class="form-control" @onchange="(e => ThemeChanged(e))">
                    <option value=string.Empty>&lt;Select Theme&gt;</option>
                    @foreach (KeyValuePair<string, string> item in _themes)
                    {
                        if (item.Key == _themetype)
                        {
                            <option value="@item.Key" selected>@item.Value</option>
                        }
                        else
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Layout: </label>
            </td>
            <td>
                <select class="form-control" @bind="@_layouttype">
                    <option value=string.Empty>&lt;Select Layout&gt;</option>
                    @foreach (KeyValuePair<string, string> panelayout in _panelayouts)
                    {
                        <option value="@panelayout.Key">@panelayout.Value</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Icon: </label>
            </td>
            <td>
                <input class="form-control" @bind="@_icon" />
            </td>
        </tr>
        <tr>
            <td colspan="2" align="center">
                <label for="Name" class="control-label">Permissions: </label>
                <PermissionGrid EntityName="@EntityNames.Page" Permissions="@_permissions" @ref="_permissionGrid" />
            </td>
        </tr>
    </table>
    <button type="button" class="btn btn-success" @onclick="SavePage">Save</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
    <br />
    <br />
    <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon" DeletedBy="@_deletedby" DeletedOn="@_deletedon"></AuditInfo>
}

@code {
    private Dictionary<string, string> _themes = new Dictionary<string, string>();
    private Dictionary<string, string> _panelayouts = new Dictionary<string, string>();
    private List<Theme> _themeList;
    private List<Page> _pageList;
    private int _pageId;
    private string _name;
    private string _path;
    private string _currentparentid;
    private string _parentid;
    private string _insert = "=";
    private List<Page> _children;
    private int _childid = -1;
    private string _isnavigation;
    private string _ispersonalizable;
    private string _mode;
    private string _themetype;
    private string _layouttype;
    private string _icon;
    private string _permissions;
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;
    private string _deletedby;
    private DateTime? _deletedon;

#pragma warning disable 649
    private PermissionGrid _permissionGrid;
#pragma warning restore 649

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Admin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _themeList = await ThemeService.GetThemesAsync();
            _pageList = PageState.Pages;
            _children = PageState.Pages.Where(item => item.ParentId == null).ToList();

            _themes = ThemeService.GetThemeTypes(_themeList);

            _pageId = Int32.Parse(PageState.QueryString["id"]);
            var page = PageState.Pages.FirstOrDefault(item => item.PageId == _pageId);
            if (page != null)
            {
                _name = page.Name;
                _title = page.Title;
                _path = page.Path;
                
                if (_path.Contains("/"))
                {
                    _path = _path.Substring(_path.LastIndexOf("/") + 1);
                }
                
                if (page.ParentId == null)
                {
                    _parentid = string.Empty;
                }
                else
                {
                    _parentid = page.ParentId.ToString();
                }
                
                _currentparentid = _parentid;
                _isnavigation = page.IsNavigation.ToString();
                _url = page.Url;
                _ispersonalizable = page.IsPersonalizable.ToString();
                _mode = (page.EditMode) ? "edit" : "view";
                _themetype = page.ThemeType;
                _panelayouts = ThemeService.GetPaneLayoutTypes(_themeList, _themetype);
                _layouttype = page.LayoutType;
                _icon = page.Icon;
                _permissions = page.Permissions;
                _createdby = page.CreatedBy;
                _createdon = page.CreatedOn;
                _modifiedby = page.ModifiedBy;
                _modifiedon = page.ModifiedOn;
                _deletedby = page.DeletedBy;
                _deletedon = page.DeletedOn;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Page {PageId} {Error}", _pageId, ex.Message);
            AddModuleMessage("Error Loading Page", MessageType.Error);
        }
    }

    private async void ParentChanged(ChangeEventArgs e)
    {
        try
        {
            _parentid = (string)e.Value;
            if (_parentid == "-1")
            {
                _children = PageState.Pages.Where(item => item.ParentId == null).ToList();
            }
            else
            {
                _children = PageState.Pages.Where(item => item.ParentId == int.Parse(_parentid)).ToList();
            }
            if (_parentid == _currentparentid)
            {
                _insert = "=";
            }
            else
            {
                _insert = ">>";
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Child Pages For Parent {PageId} {Error}", _parentid, ex.Message);
            AddModuleMessage("Error Loading Child Pages For Parent", MessageType.Error);
        }
    }

    private async void ThemeChanged(ChangeEventArgs e)
    {
        try
        {
            _themetype = (string)e.Value;
            if (_themetype != string.Empty)
            {
                _panelayouts = ThemeService.GetPaneLayoutTypes(_themeList, _themetype);
            }
            else
            {
                _panelayouts = new Dictionary<string, string>();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Pane Layouts For Theme {ThemeType} {Error}", _themetype, ex.Message);
            AddModuleMessage("Error Loading Pane Layouts For Theme", MessageType.Error);
        }
    }

    private async Task SavePage()
    {
        Page page = null;
        try
        {
            if (_name != string.Empty && !string.IsNullOrEmpty(_themetype) && (_panelayouts.Count == 0 || !string.IsNullOrEmpty(_layouttype)))
            {
                page = PageState.Pages.FirstOrDefault(item => item.PageId == _pageId);
                string currentPath = page.Path;

                page.Name = _name;
                page.Title = _title;
                if (_path == "" && _name.ToLower() != "home")
                if (_path == string.Empty && _name.ToLower() != "home")
                {
                    _path = _name;
                }
                if (_path.Contains("/"))
                {
                    _path = _path.Substring(_path.LastIndexOf("/") + 1);
                }
                if (string.IsNullOrEmpty(_parentid))
                {
                    page.ParentId = null;
                    page.Path = Utilities.GetFriendlyUrl(_path);
                }
                else
                {
                    page.ParentId = Int32.Parse(_parentid);
                    Page parent = PageState.Pages.FirstOrDefault(item => item.PageId == page.ParentId);
                    if (parent.Path == string.Empty)
                    {
                        page.Path = Utilities.GetFriendlyUrl(parent.Name) + "/" + Utilities.GetFriendlyUrl(_path);
                    }
                    else
                    {
                        page.Path = parent.Path + "/" + Utilities.GetFriendlyUrl(_path);
                    }
                }
                if (_insert != "=")
                {
                    Page child;
                    switch (_insert)
                    {
                        case "<<":
                            page.Order = 0;
                            break;
                        case "<":
                            child = PageState.Pages.FirstOrDefault(item => item.PageId == _childid);
                            if (child != null) page.Order = child.Order - 1;
                            break;
                        case ">":
                            child = PageState.Pages.FirstOrDefault(item => item.PageId == _childid);
                            if (child != null) page.Order = child.Order + 1;
                            break;
                        case ">>":
                            page.Order = int.MaxValue;
                            break;
                    }
                }
                page.IsNavigation = (_isnavigation == null || Boolean.Parse(_isnavigation));
                page.Url = _url;
                page.EditMode = (_mode == "edit");
                page.ThemeType = _themetype;
                page.LayoutType = _layouttype ?? string.Empty;
                page.Icon = _icon ?? string.Empty;
                page.Permissions = _permissionGrid.GetPermissions();

                if (page.ThemeType == PageState.Site.DefaultThemeType)
                {
                    page.ThemeType = string.Empty;
                }
                if (page.LayoutType == PageState.Site.DefaultLayoutType)
                {
                    page.LayoutType = string.Empty;
                }
                page.IsPersonalizable = (_ispersonalizable != null && Boolean.Parse(_ispersonalizable));
                page.UserId = null;

                page = await PageService.UpdatePageAsync(page);
                await PageService.UpdatePageOrderAsync(page.SiteId, page.PageId, page.ParentId);
                if (_currentparentid == string.Empty)
                {
                    await PageService.UpdatePageOrderAsync(page.SiteId, page.PageId, null);
                }
                else
                {
                    await PageService.UpdatePageOrderAsync(page.SiteId, page.PageId, int.Parse(_currentparentid));
                }

                // update child paths
                if (_parentid != _currentparentid)
                {
                    foreach (Page p in PageState.Pages.Where(item => item.Path.StartsWith(currentPath)))
                    {
                        p.Path = p.Path.Replace(currentPath, page.Path);
                        await PageService.UpdatePageAsync(p);
                    }
                }

                await logger.LogInformation("Page Saved {Page}", page);
                NavigationManager.NavigateTo(NavigateUrl(page.Path));
            }
            else
            {
                AddModuleMessage("You Must Provide Page Name And Theme", MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Page {Page} {Error}", page, ex.Message);
            AddModuleMessage("Error Saving Page", MessageType.Error);
        }
    }
}
