@using Microsoft.AspNetCore.Components.Routing
@using Oqtane.Client.Modules.Controls
@using Oqtane.Models
@using Oqtane.Services
@using Oqtane.Modules
@using Oqtane.Shared
@using Oqtane.Security
@inherits ModuleBase
@inject IUriHelper UriHelper
@inject IPageService PageService
@inject IThemeService  ThemeService

<ModuleMessage Message="@message" />

<table class="table table-borderless">
    <tr>
        <td>
            <label for="Name" class="control-label">Name: </label>
        </td>
        <td>
            <input class="form-control" @bind="@name" />
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Path: </label>
        </td>
        <td>
            <input class="form-control" @bind="@path" />
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Parent: </label>
        </td>
        <td>
            <select class="form-control" @bind="@parentid">
                <option value="">&lt;Select Parent&gt;</option>
                @foreach (Page page in PageState.Pages)
                {
                    <option value="@(page.PageId)">@(page.Name)</option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Order: </label>
        </td>
        <td>
            <input class="form-control" @bind="@order" />
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Navigation? </label>
        </td>
        <td>
            <select class="form-control" @bind="@isnavigation">
                <option value="True">Yes</option>
                <option value="False">No</option>
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Edit Mode? </label>
        </td>
        <td>
            <select class="form-control" @bind="@editmode">
                <option value="True">Yes</option>
                <option value="False">No</option>
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Theme: </label>
        </td>
        <td>
            <select class="form-control" @bind="@themetype">
                <option value="">&lt;Select Theme&gt;</option>
                @foreach (KeyValuePair<string, string> item in themes)
                {
                    <option value="@item.Key">@item.Value</option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Layout: </label>
        </td>
        <td>
            <select class="form-control" @bind="@layouttype">
                <option value="">&lt;Select Layout&gt;</option>
                @foreach (KeyValuePair<string, string> panelayout in panelayouts)
                {
                    <option value="@panelayout.Key">@panelayout.Value</option>
                }
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Icon: </label>
        </td>
        <td>
            <input class="form-control" @bind="@icon" />
        </td>
    </tr>
    <tr>
        <td>
            <label for="Name" class="control-label">Permissions: </label>
        </td>
        <td>
            <PermissionGrid EntityName="Page" Permissions="@permissions" @ref="permissiongrid" @ref:suppressField />
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="@SavePage">Save</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />
<AuditInfo CreatedBy="@createdby" CreatedOn="@createdon" ModifiedBy="@modifiedby" ModifiedOn="@modifiedon"></AuditInfo>

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Admin; } }

    string message = "";

    Dictionary<string, string> themes = new Dictionary<string, string>();
    Dictionary<string, string> panelayouts = new Dictionary<string, string>();

    int PageId;
    string name;
    string path;
    string parentid;
    string order;
    string isnavigation;
    string editmode;
    string themetype;
    string layouttype;
    string icon;
    string permissions;
    string createdby;
    DateTime createdon;
    string modifiedby;
    DateTime modifiedon;

    PermissionGrid permissiongrid;

    protected override void OnInitialized()
    {
        try
        {
            themes = ThemeService.GetThemeTypes(PageState.Themes);
            panelayouts = ThemeService.GetPaneLayoutTypes(PageState.Themes);

            PageId = Int32.Parse(PageState.QueryString["id"]);
            Page page = PageState.Pages.Where(item => item.PageId == PageId).FirstOrDefault();
            if (page != null)
            {
                name = page.Name;
                path = page.Path;
                if (page.ParentId == null)
                {
                    parentid = "";
                }
                else
                {
                    parentid = page.ParentId.ToString();
                }
                order = page.Order.ToString();
                isnavigation = page.IsNavigation.ToString();
                editmode = page.EditMode.ToString();
                themetype = page.ThemeType;
                layouttype = page.LayoutType;
                icon = page.Icon;
                permissions = page.Permissions;
                createdby = page.CreatedBy;
                createdon = page.CreatedOn;
                modifiedby = page.ModifiedBy;
                modifiedon = page.ModifiedOn;
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private async Task SavePage()
    {
        try
        {
            Page page = PageState.Page;
            page.PageId = Int32.Parse(PageState.QueryString["id"]);
            if (string.IsNullOrEmpty(parentid))
            {
                page.ParentId = null;
            }
            else
            {
                page.ParentId = Int32.Parse(parentid);
            }
            page.Name = name;
            page.Path = path;
            page.Order = (order == null ? 1 : Int32.Parse(order));
            page.IsNavigation = (isnavigation == null ? true : Boolean.Parse(isnavigation));
            page.EditMode = (editmode == null ? true : Boolean.Parse(editmode));
            page.ThemeType = themetype;
            page.LayoutType = (layouttype == null ? "" : layouttype);
            page.Icon = (icon == null ? "" : icon);
            Type type;
            if (!string.IsNullOrEmpty(layouttype))
            {
                type = Type.GetType(layouttype);
            }
            else
            {
                type = Type.GetType(themetype);
            }
            System.Reflection.PropertyInfo property = type.GetProperty("Panes");
            page.Panes = (string)property.GetValue(Activator.CreateInstance(type), null);
            page.Permissions = permissiongrid.GetPermissions();
            await PageService.UpdatePageAsync(page);

            PageState.Reload = Constants.ReloadSite;
            if (PageState.Page.Name == "Page Management")
            {
                UriHelper.NavigateTo(NavigateUrl());
            }
            else
            {
                UriHelper.NavigateTo(NavigateUrl(path));
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }
}
