@namespace Oqtane.Modules.Admin.Roles
@inherits ModuleBase
@inject IRoleService RoleService

@if (Roles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Text="Add Role" />

    <Pager Items="@Roles">
        <Header>
            <th>&nbsp;</th>
            <th>&nbsp;</th>
            <th>Name</th>
        </Header>
        <Row>
            <td><ActionLink Action="Edit" Parameters="@($"id=" + context.RoleId.ToString())" /></td>
            <td><ActionDialog Header="Delete Role" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Role?")" Action="Delete" Security="SecurityAccessLevel.Admin" Class="btn btn-danger" OnClick="@(async () => await DeleteRole(context))" /></td>
            <td>@context.Name</td>
        </Row>
    </Pager>
}

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.Admin; } }

    List<Role> Roles;

    protected override async Task OnParametersSetAsync()
    {
        Roles = await RoleService.GetRolesAsync(PageState.Site.SiteId);
    }

    private async Task DeleteRole(Role Role)
    {
        try
        {
            await RoleService.DeleteRoleAsync(Role.RoleId);
            await logger.LogInformation("Role Deleted {Role}", Role);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Role {Role} {Error}", Role, ex.Message);
            AddModuleMessage("Error Deleting Role", MessageType.Error);
        }
    }
}