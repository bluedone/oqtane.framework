@using Microsoft.AspNetCore.Components.Routing
@using Oqtane.Modules.Controls
@using Oqtane.Modules
@using Oqtane.Models
@using Oqtane.Services
@namespace Oqtane.Modules.Admin.Profile
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IProfileService ProfileService
@inject ISettingService SettingService

<ModuleMessage Message="@message" />

@if (PageState.User != null && profiles != null)
{
    <table class="table table-borderless">
        <tr>
            <td>
                <label for="Name" class="control-label">Name: </label>
            </td>
            <td>
                <input class="form-control" @bind="@displayname" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Name" class="control-label">Email: </label>
            </td>
            <td>
                <input class="form-control" @bind="@email" />
            </td>
        </tr>

        @foreach (Profile profile in profiles)
        {
            var p = profile;
            if (p.Category != category)
            {
                <tr>
                    <th colspan="2" style="text-align: center;">
                        @p.Category
                    </th>
                </tr>
                category = p.Category;
            }
            <tr>
                <td>
                    <label for="@p.Name" class="control-label">@p.Title: </label>
                </td>
                <td>
                    <input class="form-control" maxlength="@p.MaxLength" value="@GetProfileValue(p.Name, p.DefaultValue)" placeholder="@p.Description" @onchange="(e => ProfileChanged(e, p.Name))" />
                </td>
            </tr>
        }
    </table>
    <button type="button" class="btn btn-primary" @onclick="SaveUser">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <br />
    <br />
}

@code {
    public override SecurityAccessLevel SecurityAccessLevel { get { return SecurityAccessLevel.View; } }

    string message = "";
    string displayname = "";
    string email = "";
    List<Profile> profiles;
    Dictionary<string, string> settings;
    string category = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.User != null)
            {
                displayname = PageState.User.DisplayName;
                email = PageState.User.Email;
                profiles = await ProfileService.GetProfilesAsync(ModuleState.SiteId);
                settings = await SettingService.GetUserSettingsAsync(PageState.User.UserId);
            }
            else
            {
                message = "Current User Is Not Logged In";
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private string GetProfileValue(string SettingName, string DefaultValue)
    {
        return SettingService.GetSetting(settings, SettingName, DefaultValue);
    }

    private async Task SaveUser()
    {
        try
        {
            User user = PageState.User;
            user.DisplayName = displayname;
            user.Email = email;
            await UserService.UpdateUserAsync(user);
            await SettingService.UpdateUserSettingsAsync(settings, PageState.User.UserId);

            NavigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo(NavigateUrl(""));
    }

    private void ProfileChanged(ChangeEventArgs e, string SettingName)
    {
        string value = (string)e.Value;
        settings = SettingService.SetSetting(settings, SettingName, value);
    }
}
