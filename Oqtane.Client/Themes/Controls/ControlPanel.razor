@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Oqtane.Services
@using Oqtane.Models
@using Oqtane.Themes
@using Oqtane.Shared
@using Oqtane.Security
@namespace Oqtane.Themes.Controls
@inherits ThemeObjectBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IModuleDefinitionService ModuleDefinitionService
@inject IThemeService ThemeService
@inject IModuleService ModuleService
@inject IPageModuleService PageModuleService

@if (UserSecurity.IsAuthorized(PageState.User, "Edit", PageState.Page.Permissions))
{
    <div id="actions" class="overlay">
        <a href="javascript:void(0)" class="closebtn" onclick="closeActions()">x</a>
        <div class="overlay-content">
            <ul class="nav flex-column">
                <li class="nav-item px-3">
                    <NavLink class="btn btn-primary mx-auto" href="@PageUrl("Add")">Add Page</NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="btn btn-primary mx-auto" href="@PageUrl("Edit")">Edit Page</NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="btn btn-primary mx-auto" href="@PageUrl("Delete")">Delete Page</NavLink>
                </li>
            </ul>
            <hr style="width: 100%; color: white; height: 1px; background-color:white;" />
            <div class="container">
                <table class="table table-borderless">
                    <tr>
                        <td>
                            <label for="Module" class="control-label" style="color: white !important;">Module: </label>
                        </td>
                        <td>
                            @if (moduledefinitions != null)
                            {
                                <select class="form-control" @bind="@moduledefinitionname">
                                    <option value="">&lt;Select Module&gt;</option>
                                    @foreach (var moduledefinition in moduledefinitions)
                                    {
                                        <option value="@moduledefinition.ModuleDefinitionName">@moduledefinition.Name</option>
                                    }
                                </select>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Pane" class="control-label" style="color: white !important;">Pane: </label>
                        </td>
                        <td>
                            <select class="form-control" @bind="@pane">
                                <option value="">&lt;Select Pane&gt;</option>
                                @foreach (string pane in PageState.Page.Panes.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                                {
                                    <option value="@pane">@pane Pane</option>
                                }
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Title" class="control-label" style="color: white !important;">Title: </label>
                        </td>
                        <td>
                            <input type="text" name="Title" class="form-control" @bind="@title" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="Container" class="control-label" style="color: white !important;">Container: </label>
                        </td>
                        <td>
                            <select class="form-control" @bind="@containertype">
                                <option value="">&lt;Select Container&gt;</option>
                                @foreach (KeyValuePair<string, string> container in containers)
                                {
                                    <option value="@container.Key">@container.Value</option>
                                }
                            </select>
                        </td>
                    </tr>
                </table>
                <button type="button" class="btn btn-primary mx-auto" style="width: 100%;" @onclick="@AddModule">Add Module To Page</button>
            </div>
            <hr style="width: 100%; color: white; height: 1px; background-color:white;" />
            <ul class="nav flex-column">
                <li class="nav-item px-3">
                    <NavLink class="btn btn-primary mx-auto" href="@NavigateUrl("admin")">Admin Dashboard</NavLink>
                </li>
            </ul>
        </div>
    </div>

    @if (PageState.EditMode)
    {
        <button type="button" class="btn btn-outline-primary active" data-toggle="button" aria-pressed="true" autocomplete="off" @onclick="EditMode">
            <span class="oi oi-pencil"></span>
        </button>

    }
    else
    {
        <button type="button" class="btn btn-outline-primary" data-toggle="button" aria-pressed="false" autocomplete="off" @onclick="EditMode">
            <span class="oi oi-pencil"></span>
        </button>
    }
    <span class="oi oi-menu" onclick="openActions()"></span>
}

@code {
    List<ModuleDefinition> moduledefinitions;
    Dictionary<string, string> containers = new Dictionary<string, string>();
    int pagemanagementmoduleid = -1;
    string moduledefinitionname = "";
    string pane = "";
    string title = "";
    string containertype = "";

    protected override async Task OnInitializedAsync()
    {
        if (UserSecurity.IsAuthorized(PageState.User, "Edit", PageState.Page.Permissions))
        {
            moduledefinitions = PageState.ModuleDefinitions;
            containers = ThemeService.GetContainerTypes(PageState.Themes);
            List<Module> modules = await ModuleService.GetModulesAsync(PageState.Site.SiteId, Constants.PageManagementModule);
            if (modules.Count > 0)
            {
                pagemanagementmoduleid = modules.FirstOrDefault().ModuleId;
            }
        }
    }

    private async Task AddModule()
    {
        if (UserSecurity.IsAuthorized(PageState.User, "Edit", PageState.Page.Permissions))
        {
            Module module = new Module();
            module.SiteId = PageState.Site.SiteId;
            module.ModuleDefinitionName = moduledefinitionname;
            module.Permissions = PageState.Page.Permissions;
            await ModuleService.AddModuleAsync(module);

            List<Module> modules = await ModuleService.GetModulesAsync(PageState.Site.SiteId, moduledefinitionname);
            int ModuleId = modules.LastOrDefault().ModuleId;

            PageModule pagemodule = new PageModule();
            pagemodule.PageId = PageState.Page.PageId;
            pagemodule.ModuleId = ModuleId;
            if (title == "")
            {
                title = moduledefinitions.Where(item => item.ModuleDefinitionName == moduledefinitionname).FirstOrDefault().Name;
            }
            pagemodule.Title = title;
            pagemodule.Pane = pane;
            pagemodule.Order = int.MaxValue;
            pagemodule.ContainerType = containertype;
            await PageModuleService.AddPageModuleAsync(pagemodule);
            await PageModuleService.UpdatePageModuleOrderAsync(pagemodule.PageId, pagemodule.Pane);

            PageState.Reload = Constants.ReloadPage;
            NavigationManager.NavigateTo(NavigateUrl());
        }
    }

    private string PageUrl(string action)
    {
        string url = "";
        if (pagemanagementmoduleid != -1)
        {
            switch (action)
            {
                case "Add":
                    url = EditUrl("admin/pages", pagemanagementmoduleid, action, "");
                    break;
                case "Edit":
                    url = EditUrl("admin/pages", pagemanagementmoduleid, action, "id=" + PageState.Page.PageId.ToString());
                    break;
                case "Delete":
                    url = EditUrl("admin/pages", pagemanagementmoduleid, action, "id=" + PageState.Page.PageId.ToString());
                    break;
            }
        }
        return url;
    }

    private void EditMode()
    {
        if (UserSecurity.IsAuthorized(PageState.User, "Edit", PageState.Page.Permissions))
        {
            if (PageState.EditMode)
            {
                PageState.EditMode = false;
                PageState.DesignMode = false;
            }
            else
            {
                PageState.EditMode = true;
                PageState.DesignMode = true;
            }
            PageState.Reload = Constants.ReloadPage;
            NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, "edit=" + PageState.EditMode.ToString().ToLower()));
        }
    }
}