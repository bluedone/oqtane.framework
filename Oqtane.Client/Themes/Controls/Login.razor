@namespace Oqtane.Themes.Controls
@inherits ThemeControlBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IJSRuntime jsRuntime
@inject IServiceProvider ServiceProvider

<AuthorizeView>
    <Authorizing>
        <text>...</text>
    </Authorizing>
    <Authorized>
        <button type="button" class="btn btn-primary" @onclick="LogoutUser">Logout</button>
    </Authorized>
    <NotAuthorized>
        <button type="button" class="btn btn-primary" @onclick="LoginUser">Login</button>
    </NotAuthorized>
</AuthorizeView>


@code {
    private void LoginUser()
    {
        var returnurl = PageState.Alias.Path;
        if (PageState.Page.Path != "/")
        {
            returnurl += "/" + PageState.Page.Path;
        }
        
        NavigationManager.NavigateTo(NavigateUrl("login", "returnurl=" + returnurl));
    }

    private async Task LogoutUser()
    {
        await UserService.LogoutUserAsync(PageState.User);

        if (PageState.Runtime == Runtime.Server)
        {
            // server-side Blazor
            var interop = new Interop(jsRuntime);
            string antiforgerytoken = await interop.GetElementByName("__RequestVerificationToken");
            var fields = new { __RequestVerificationToken = antiforgerytoken, returnurl = (PageState.Alias.Path + "/" + PageState.Page.Path) };
            await interop.SubmitForm("/pages/logout/", fields);
        }
        else
        {
            // client-side Blazor
            var authstateprovider = (IdentityAuthenticationStateProvider)ServiceProvider.GetService(typeof(IdentityAuthenticationStateProvider));
            authstateprovider.NotifyAuthenticationChanged();
            NavigationManager.NavigateTo(NavigateUrl(PageState.Page.Path, "reload"));
        }
    }
}
