<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Confirm.User.Delete" xml:space="preserve">
    <value>Are You Sure You Wish To Delete {0}?</value>
  </data>
  <data name="AddUser.Text" xml:space="preserve">
    <value>Add User</value>
  </data>
  <data name="DeleteUser.Header" xml:space="preserve">
    <value>Delete User</value>
  </data>
  <data name="AllowRegistration.HelpText" xml:space="preserve">
    <value>Do you want anonymous visitors to be able to register for an account on the site</value>
  </data>
  <data name="AllowRegistration.Text" xml:space="preserve">
    <value>Allow Registration? </value>
  </data>
  <data name="Error.SaveSiteSettings" xml:space="preserve">
    <value>Error Saving Settings</value>
  </data>
  <data name="Settings.Heading" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Success.SaveSiteSettings" xml:space="preserve">
    <value>Settings Saved Successfully</value>
  </data>
  <data name="Users.Heading" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="DeleteUser.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="EditUser.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Roles.Text" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="LockoutDuration.HelpText" xml:space="preserve">
    <value>The number of minutes a user should be locked out</value>
  </data>
  <data name="LockoutDuration.Text" xml:space="preserve">
    <value>Lockout Duration:</value>
  </data>
  <data name="MaximumFailures.HelpText" xml:space="preserve">
    <value>The maximum number of sign in attempts before a user is locked out</value>
  </data>
  <data name="MaximumFailures.Text" xml:space="preserve">
    <value>Maximum Failures:</value>
  </data>
  <data name="RequireDigit.HelpText" xml:space="preserve">
    <value>Indicate if passwords must contain a digit</value>
  </data>
  <data name="RequireDigit.Text" xml:space="preserve">
    <value>Require Digit?</value>
  </data>
  <data name="RequiredLength.HelpText" xml:space="preserve">
    <value>The minimum length for a password</value>
  </data>
  <data name="RequiredLength.Text" xml:space="preserve">
    <value>Minimum Length:</value>
  </data>
  <data name="RequireLower.HelpText" xml:space="preserve">
    <value>Indicate if passwords must contain a lower case character</value>
  </data>
  <data name="RequireLower.Text" xml:space="preserve">
    <value>Require Lowercase?</value>
  </data>
  <data name="RequirePunctuation.HelpText" xml:space="preserve">
    <value>Indicate if passwords must contain a non-alphanumeric character (ie. punctuation)</value>
  </data>
  <data name="RequirePunctuation.Text" xml:space="preserve">
    <value>Require Punctuation?</value>
  </data>
  <data name="RequireUpper.HelpText" xml:space="preserve">
    <value>Indicate if passwords must contain an upper case character</value>
  </data>
  <data name="RequireUpper.Text" xml:space="preserve">
    <value>Require Uppercase?</value>
  </data>
  <data name="Success.UpdateConfig.Restart" xml:space="preserve">
    <value>Configuration Updated. Please Select Restart Application For These Changes To Be Activated.</value>
  </data>
  <data name="UniqueCharacters.HelpText" xml:space="preserve">
    <value>The minimum number of unique characters which a password must contain</value>
  </data>
  <data name="UniqueCharacters.Text" xml:space="preserve">
    <value>Unique Characters:</value>
  </data>
  <data name="AllowSiteLogin.HelpText" xml:space="preserve">
    <value>Do you want to allow users to sign in using a username and password that is managed locally on this site? Note that you should only disable this option if you have already sucessfully configured an external login provider, or else you may lock yourself out of the site.</value>
  </data>
  <data name="AllowSiteLogin.Text" xml:space="preserve">
    <value>Allow Login?</value>
  </data>
  <data name="Authority.HelpText" xml:space="preserve">
    <value>The authority url or issuer url associated with the identity provider</value>
  </data>
  <data name="Authority.Text" xml:space="preserve">
    <value>Authority:</value>
  </data>
  <data name="AuthorizationUrl.HelpText" xml:space="preserve">
    <value>The endpoint for obtaining an authorization code</value>
  </data>
  <data name="AuthorizationUrl.Text" xml:space="preserve">
    <value>Authorization Url:</value>
  </data>
  <data name="ClientID.HelpText" xml:space="preserve">
    <value>The client id for the identity provider</value>
  </data>
  <data name="ClientID.Text" xml:space="preserve">
    <value>Client ID:</value>
  </data>
  <data name="ClientSecret.HelpText" xml:space="preserve">
    <value>The client secret for the identity provider</value>
  </data>
  <data name="ClientSecret.Text" xml:space="preserve">
    <value>Client Secret:</value>
  </data>
  <data name="CreateUsers.HelpText" xml:space="preserve">
    <value>Do you want new users to be created automatically? If you disable this option, users must already be registered on the site in order to sign in with their external login.</value>
  </data>
  <data name="CreateUsers.Text" xml:space="preserve">
    <value>Create New Users?</value>
  </data>
  <data name="DomainFilter.HelpText" xml:space="preserve">
    <value>Provide any email domain filter criteria (separated by commas). Domains to exclude should be prefixed with an exclamation point (!). For example 'microsoft.com,!hotmail.com' would include microsoft.com email addresses but not hotmail.com email addresses.</value>
  </data>
  <data name="DomainFilter.Text" xml:space="preserve">
    <value>Domain Filter:</value>
  </data>
  <data name="EmailClaimType.HelpText" xml:space="preserve">
    <value>The name of the email address claim provided by the identity provider</value>
  </data>
  <data name="EmailClaimType.Text" xml:space="preserve">
    <value>Email Claim:</value>
  </data>
  <data name="ExternalLoginSettings.Heading" xml:space="preserve">
    <value>External Login Settings</value>
  </data>
  <data name="LockoutSettings.Heading" xml:space="preserve">
    <value>Lockout Settings</value>
  </data>
  <data name="MetadataUrl.HelpText" xml:space="preserve">
    <value>The discovery endpoint for obtaining metadata for this identity provider. Only specify if the identity provider does not use the standard approach (ie. /.well-known/openid-configuration)</value>
  </data>
  <data name="MetadataUrl.Text" xml:space="preserve">
    <value>Metadata Url:</value>
  </data>
  <data name="PasswordSettings.Heading" xml:space="preserve">
    <value>Password Settings</value>
  </data>
  <data name="PKCE.HelpText" xml:space="preserve">
    <value>Indicate if the identity provider supports proof key for code exchange (PKCE)</value>
  </data>
  <data name="PKCE.Text" xml:space="preserve">
    <value>Use PKCE?</value>
  </data>
  <data name="ProviderName.HelpText" xml:space="preserve">
    <value>The external login provider name which will be displayed on the login page</value>
  </data>
  <data name="ProviderName.Text" xml:space="preserve">
    <value>Provider Name:</value>
  </data>
  <data name="ProviderType.HelpText" xml:space="preserve">
    <value>Select the external login provider type</value>
  </data>
  <data name="ProviderType.Text" xml:space="preserve">
    <value>Provider Type:</value>
  </data>
  <data name="RedirectUrl.HelpText" xml:space="preserve">
    <value>The redirect url (or callback url) which usually needs to be registered with the identity provider</value>
  </data>
  <data name="RedirectUrl.Text" xml:space="preserve">
    <value>Redirect Url:</value>
  </data>
  <data name="Scopes.HelpText" xml:space="preserve">
    <value>A list of scopes to request from the identity provider (separated by commas). If none are specified, standard Scopes will be used by default.</value>
  </data>
  <data name="Scopes.Text" xml:space="preserve">
    <value>Scopes:</value>
  </data>
  <data name="TokenUrl.HelpText" xml:space="preserve">
    <value>The endpoint for obtaining an auth token</value>
  </data>
  <data name="TokenUrl.Text" xml:space="preserve">
    <value>Token Url:</value>
  </data>
  <data name="UserInfoUrl.HelpText" xml:space="preserve">
    <value>The endpoint for obtaining user information. This should be an API endpoint or page url which contains the users email address.</value>
  </data>
  <data name="UserInfoUrl.Text" xml:space="preserve">
    <value>User Info Url:</value>
  </data>
  <data name="Audience.HelpText" xml:space="preserve">
    <value>Optionally provide the audience for the token</value>
  </data>
  <data name="Audience.Text" xml:space="preserve">
    <value>Audience:</value>
  </data>
  <data name="UserSettings.Heading" xml:space="preserve">
    <value>User Settings</value>
  </data>
  <data name="CookieName.HelpText" xml:space="preserve">
    <value>You can choose to use a custom authentication cookie name for each site. However please be aware that if you want to share an authentication cookie between sites on the same domain they need to use a consistent cookie name. Also be aware that changing the authentication cookie name will logout all current users.</value>
  </data>
  <data name="CookieName.Text" xml:space="preserve">
    <value>Cookie Name:</value>
  </data>
  <data name="CreateToken" xml:space="preserve">
    <value>Create Token</value>
  </data>
  <data name="Issuer.HelpText" xml:space="preserve">
    <value>Optionally provide the issuer of the token</value>
  </data>
  <data name="Issuer.Text" xml:space="preserve">
    <value>Issuer:</value>
  </data>
  <data name="Lifetime.HelpText" xml:space="preserve">
    <value>The number of minutes for which a token should be valid</value>
  </data>
  <data name="Lifetime.Text" xml:space="preserve">
    <value>Lifetime:</value>
  </data>
  <data name="Secret.HelpText" xml:space="preserve">
    <value>If you want to want to provide API access, please specify a secret which will be used to encrypt your tokens. The secret should be 16 characters or more to ensure optimal security. Please note that if you change this secret, all existing tokens will become invalid and will need to be regenerated.</value>
  </data>
  <data name="Secret.Text" xml:space="preserve">
    <value>Secret:</value>
  </data>
  <data name="Token.HelpText" xml:space="preserve">
    <value>Select the Create Token button to generate a long-lived access token (valid for 1 year). Be sure to store this token in a safe location as you will not be able to access it in the future.</value>
  </data>
  <data name="Token.Text" xml:space="preserve">
    <value>Token:</value>
  </data>
  <data name="TokenSettings.Heading" xml:space="preserve">
    <value>Token Settings</value>
  </data>
  <data name="TwoFactor.HelpText" xml:space="preserve">
    <value>Do you want users to use two factor authentication? Note that you should use the Disabled option until you have successfully verified that the Notification Job in Scheduled Jobs is enabled and your SMTP options in Site Settings are configured or else you will lock yourself out.</value>
  </data>
  <data name="TwoFactor.Text" xml:space="preserve">
    <value>Two Factor?</value>
  </data>
  <data name="Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="Optional" xml:space="preserve">
    <value>Optional</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="LastLoginOn" xml:space="preserve">
    <value>Last Login</value>
  </data>
  <data name="IdentifierClaimType.HelpText" xml:space="preserve">
    <value>The name of the unique user identifier claim provided by the identity provider</value>
  </data>
  <data name="IdentifierClaimType.Text" xml:space="preserve">
    <value>Identifier Claim:</value>
  </data>
  <data name="Parameters.HelpText" xml:space="preserve">
    <value>Optionally specify any additional parameters as name/value pairs to send to the identity provider (separated by commas if there are multiple).</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Parameters:</value>
  </data>
  <data name="RoleClaimType.HelpText" xml:space="preserve">
    <value>Optionally provide the name of the role claim provided by the identity provider. These roles will be used in addition to any internal user roles assigned within the site.</value>
  </data>
  <data name="RoleClaimType.Text" xml:space="preserve">
    <value>Role Claim:</value>
  </data>
    <data name="ProfileClaimTypes.HelpText" xml:space="preserve">
    <value>Optionally provide a comma delimited list of user profile claims provided by the identity provider, as well as mappings to your user profile definition. For example if the identity provider includes a 'given_name' claim and you have a 'FirstName' user profile definition you should specify 'given_name:FirstName'.</value>
  </data>
  <data name="ProfileClaimTypes.Text" xml:space="preserve">
    <value>User Profile Claims:</value>
  </data>
</root>